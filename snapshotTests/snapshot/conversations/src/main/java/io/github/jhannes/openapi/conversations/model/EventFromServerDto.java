/*
 * Conversations
 * Conversations for real time and offline peer-to-peer web chat
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.conversations.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* EventFromServerDto
*/
public class EventFromServerDto extends CommandToServerDto implements MessageFromServerDto {

    private OffsetDateTime serverTime;

    private String username;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "id",
                "clientTime",
                "delta",
                "serverTime",
                "username",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = super.missingRequiredFields();
        if (isMissing(getServerTime())) result.add("serverTime");
        if (isMissing(getUsername())) result.add("username");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        super.readOnlyFieldsWithValue(result);
    }

    public <T extends EventFromServerDto> T copyTo(T target) {
        super.copyTo(target);
        if (this.getServerTime() != null) target.setServerTime(this.getServerTime());
        if (this.getUsername() != null) target.setUsername(this.getUsername());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    @Override
    public EventFromServerDto id(UUID id) {
        super.id(id);
        return this;
    }

    @Override
    public EventFromServerDto clientTime(OffsetDateTime clientTime) {
        super.clientTime(clientTime);
        return this;
    }

    @Override
    public EventFromServerDto delta(DeltaDto delta) {
        super.delta(delta);
        return this;
    }

    /**
     * Get serverTime
     * @return serverTime
     */
    public OffsetDateTime getServerTime() {
        return serverTime;
    }

    public void setServerTime(OffsetDateTime serverTime) {
        this.serverTime = serverTime;
    }

    public EventFromServerDto serverTime(OffsetDateTime serverTime) {
        this.serverTime = serverTime;
        return this;
    }

    /**
     * Get username
     * @return username
     */
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public EventFromServerDto username(String username) {
        this.username = username;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EventFromServerDto eventFromServer = (EventFromServerDto) o;
        return Objects.equals(this.getServerTime(), eventFromServer.getServerTime()) &&
                Objects.equals(this.getUsername(), eventFromServer.getUsername()) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getClientTime(), getDelta(), getServerTime(), getUsername());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("EventFromServerDto {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    serverTime: ").append(toIndentedString(getServerTime())).append("\n");
        sb.append("    username: ").append(toIndentedString(getUsername())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

