/*
 * Conversations
 * Conversations for real time and offline peer-to-peer web chat
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.conversations.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* AddMessageToConversationDeltaDto
*/
public class AddMessageToConversationDeltaDto implements DeltaDto {

    private String delta = "AddMessageToConversationDelta";

    private UUID conversationId;

    private UUID messageId;

    private ConversationMessageDto message;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "delta",
                "conversationId",
                "messageId",
                "message",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getDelta())) result.add("delta");
        if (isMissing(getConversationId())) result.add("conversationId");
        if (isMissing(getMessageId())) result.add("messageId");
        if (isMissing(getMessage())) result.add("message");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (message != null) {
            message.readOnlyFieldsWithValue(result);
        }
    }

    public <T extends AddMessageToConversationDeltaDto> T copyTo(T target) {
        if (this.getDelta() != null) target.setDelta(this.getDelta());
        if (this.getConversationId() != null) target.setConversationId(this.getConversationId());
        if (this.getMessageId() != null) target.setMessageId(this.getMessageId());
        if (this.getMessage() != null) target.setMessage(this.getMessage());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get delta
     * @return delta
     */
    public String getDelta() {
        return delta;
    }

    public void setDelta(String delta) {
        this.delta = delta;
    }

    public AddMessageToConversationDeltaDto delta(String delta) {
        this.delta = delta;
        return this;
    }

    /**
     * Get conversationId
     * @return conversationId
     */
    public UUID getConversationId() {
        return conversationId;
    }

    public void setConversationId(UUID conversationId) {
        this.conversationId = conversationId;
    }

    public AddMessageToConversationDeltaDto conversationId(UUID conversationId) {
        this.conversationId = conversationId;
        return this;
    }

    /**
     * Get messageId
     * @return messageId
     */
    public UUID getMessageId() {
        return messageId;
    }

    public void setMessageId(UUID messageId) {
        this.messageId = messageId;
    }

    public AddMessageToConversationDeltaDto messageId(UUID messageId) {
        this.messageId = messageId;
        return this;
    }

    /**
     * Get message
     * @return message
     */
    public ConversationMessageDto getMessage() {
        return message;
    }

    public void setMessage(ConversationMessageDto message) {
        this.message = message;
    }

    public AddMessageToConversationDeltaDto message(ConversationMessageDto message) {
        this.message = message;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddMessageToConversationDeltaDto addMessageToConversationDelta = (AddMessageToConversationDeltaDto) o;
        return Objects.equals(this.getDelta(), addMessageToConversationDelta.getDelta()) &&
                Objects.equals(this.getConversationId(), addMessageToConversationDelta.getConversationId()) &&
                Objects.equals(this.getMessageId(), addMessageToConversationDelta.getMessageId()) &&
                Objects.equals(this.getMessage(), addMessageToConversationDelta.getMessage());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getDelta(), getConversationId(), getMessageId(), getMessage());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("AddMessageToConversationDeltaDto {\n");
        sb.append("    delta: ").append(toIndentedString(getDelta())).append("\n");
        sb.append("    conversationId: ").append(toIndentedString(getConversationId())).append("\n");
        sb.append("    messageId: ").append(toIndentedString(getMessageId())).append("\n");
        sb.append("    message: ").append(toIndentedString(getMessage())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

