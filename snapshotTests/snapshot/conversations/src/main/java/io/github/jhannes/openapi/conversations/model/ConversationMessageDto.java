/*
 * Conversations
 * Conversations for real time and offline peer-to-peer web chat
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.conversations.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* ConversationMessageDto
*/
public class ConversationMessageDto implements ConversationMessageInterface {

    private String text;

    private List<String> tags = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "text",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getText())) result.add("text");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
    }

    public <T extends ConversationMessageDto> T copyTo(T target) {
        if (this.getText() != null) target.setText(this.getText());
        if (this.getTags() != null) target.setTags(this.getTags());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get text
     * @return text
     */
    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public ConversationMessageDto text(String text) {
        this.text = text;
        return this;
    }

    public <T> ConversationMessageDto tags(Collection<T> items, Function<T, String> mapper) {
        return tags(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getTags(Function<String, T> mapper) {
        return getTags().stream().map(mapper).collect(Collectors.toList());
    }

    public ConversationMessageDto addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * Get tags
     * @return tags
     */
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public ConversationMessageDto tags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConversationMessageDto conversationMessage = (ConversationMessageDto) o;
        return Objects.equals(this.getText(), conversationMessage.getText()) &&
                Objects.equals(this.getTags(), conversationMessage.getTags());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getText(), getTags());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("ConversationMessageDto {\n");
        sb.append("    text: ").append(toIndentedString(getText())).append("\n");
        sb.append("    tags: ").append(toIndentedString(getTags())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

