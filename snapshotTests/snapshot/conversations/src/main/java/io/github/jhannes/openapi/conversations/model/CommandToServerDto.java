/*
 * Conversations
 * Conversations for real time and offline peer-to-peer web chat
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.conversations.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* CommandToServerDto
*/
public class CommandToServerDto implements MessageToServerDto {

    private UUID id;

    private OffsetDateTime clientTime;

    private DeltaDto delta;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "id",
                "clientTime",
                "delta",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getId())) result.add("id");
        if (isMissing(getClientTime())) result.add("clientTime");
        if (isMissing(getDelta())) result.add("delta");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (delta != null) {
            delta.readOnlyFieldsWithValue(result);
        }
    }

    public <T extends CommandToServerDto> T copyTo(T target) {
        if (this.getId() != null) target.setId(this.getId());
        if (this.getClientTime() != null) target.setClientTime(this.getClientTime());
        if (this.getDelta() != null) target.setDelta(this.getDelta());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get id
     * @return id
     */
    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public CommandToServerDto id(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get clientTime
     * @return clientTime
     */
    public OffsetDateTime getClientTime() {
        return clientTime;
    }

    public void setClientTime(OffsetDateTime clientTime) {
        this.clientTime = clientTime;
    }

    public CommandToServerDto clientTime(OffsetDateTime clientTime) {
        this.clientTime = clientTime;
        return this;
    }

    /**
     * Get delta
     * @return delta
     */
    public DeltaDto getDelta() {
        return delta;
    }

    public void setDelta(DeltaDto delta) {
        this.delta = delta;
    }

    public CommandToServerDto delta(DeltaDto delta) {
        this.delta = delta;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommandToServerDto commandToServer = (CommandToServerDto) o;
        return Objects.equals(this.getId(), commandToServer.getId()) &&
                Objects.equals(this.getClientTime(), commandToServer.getClientTime()) &&
                Objects.equals(this.getDelta(), commandToServer.getDelta());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getClientTime(), getDelta());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("CommandToServerDto {\n");
        sb.append("    id: ").append(toIndentedString(getId())).append("\n");
        sb.append("    clientTime: ").append(toIndentedString(getClientTime())).append("\n");
        sb.append("    delta: ").append(toIndentedString(getDelta())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

