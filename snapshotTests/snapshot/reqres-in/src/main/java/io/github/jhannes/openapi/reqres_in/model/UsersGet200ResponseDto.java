/*
 * ReqRes API
 * Fake data CRUD API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.reqres_in.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* UsersGet200ResponseDto
*/
public class UsersGet200ResponseDto {

    private Integer page = null;

    private Integer per_page = null;

    private Integer total = null;

    private Integer total_pages = null;

    private List<UserDto> data = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (data != null) {
            data.forEach(o -> o.readOnlyFieldsWithValue(result));
        }
    }

    public <T extends UsersGet200ResponseDto> T copyTo(T target) {
        if (this.getPage() != null) target.setPage(this.getPage());
        if (this.getPerPage() != null) target.setPerPage(this.getPerPage());
        if (this.getTotal() != null) target.setTotal(this.getTotal());
        if (this.getTotalPages() != null) target.setTotalPages(this.getTotalPages());
        if (this.getData() != null) target.setData(this.getData());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get page
     * @return page
     */
    public Integer getPage() {
        return page;
    }

    public void setPage(Integer page) {
        this.page = page;
    }

    public UsersGet200ResponseDto page(Integer page) {
        this.page = page;
        return this;
    }

    /**
     * Get per_page
     * @return per_page
     */
    public Integer getPerPage() {
        return per_page;
    }

    public void setPerPage(Integer perPage) {
        this.per_page = perPage;
    }

    public UsersGet200ResponseDto perPage(Integer perPage) {
        this.per_page = perPage;
        return this;
    }

    /**
     * Get total
     * @return total
     */
    public Integer getTotal() {
        return total;
    }

    public void setTotal(Integer total) {
        this.total = total;
    }

    public UsersGet200ResponseDto total(Integer total) {
        this.total = total;
        return this;
    }

    /**
     * Get total_pages
     * @return total_pages
     */
    public Integer getTotalPages() {
        return total_pages;
    }

    public void setTotalPages(Integer totalPages) {
        this.total_pages = totalPages;
    }

    public UsersGet200ResponseDto totalPages(Integer totalPages) {
        this.total_pages = totalPages;
        return this;
    }

    public <T> UsersGet200ResponseDto data(Collection<T> items, Function<T, UserDto> mapper) {
        return data(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getData(Function<UserDto, T> mapper) {
        return getData().stream().map(mapper).collect(Collectors.toList());
    }

    public UsersGet200ResponseDto addDataItem(UserDto dataItem) {
        if (this.data == null) {
            this.data = new ArrayList<>();
        }
        this.data.add(dataItem);
        return this;
    }

    /**
     * Get data
     * @return data
     */
    public List<UserDto> getData() {
        return data;
    }

    public void setData(List<UserDto> data) {
        this.data = data;
    }

    public UsersGet200ResponseDto data(List<UserDto> data) {
        this.data = data;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UsersGet200ResponseDto usersGet200Response = (UsersGet200ResponseDto) o;
        return Objects.equals(this.getPage(), usersGet200Response.getPage()) &&
                Objects.equals(this.getPerPage(), usersGet200Response.getPerPage()) &&
                Objects.equals(this.getTotal(), usersGet200Response.getTotal()) &&
                Objects.equals(this.getTotalPages(), usersGet200Response.getTotalPages()) &&
                Objects.equals(this.getData(), usersGet200Response.getData());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPage(), getPerPage(), getTotal(), getTotalPages(), getData());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UsersGet200ResponseDto {\n");
        sb.append("    page: ").append(toIndentedString(getPage())).append("\n");
        sb.append("    per_page: ").append(toIndentedString(getPerPage())).append("\n");
        sb.append("    total: ").append(toIndentedString(getTotal())).append("\n");
        sb.append("    total_pages: ").append(toIndentedString(getTotalPages())).append("\n");
        sb.append("    data: ").append(toIndentedString(getData())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

