/*
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.openid_configuration.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* UserinfoDto
*/
public class UserinfoDto extends HashMap<String, Object> {

    private String sub;

    private String name = null;

    private Object email = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "sub",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getSub())) result.add("sub");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
    }

    public <T extends UserinfoDto> T copyTo(T target) {
        target.putAll(this);
        if (this.getSub() != null) target.setSub(this.getSub());
        if (this.getName() != null) target.setName(this.getName());
        if (this.getEmail() != null) target.setEmail(this.getEmail());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Subject identifier
     * @return sub
     */
    public String getSub() {
        return sub;
    }

    public void setSub(String sub) {
        this.sub = sub;
    }

    public UserinfoDto sub(String sub) {
        this.sub = sub;
        return this;
    }

    /**
     * Get name
     * @return name
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UserinfoDto name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get email
     * @return email
     */
    public Object getEmail() {
        return email;
    }

    public void setEmail(Object email) {
        this.email = email;
    }

    public UserinfoDto email(Object email) {
        this.email = email;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserinfoDto userinfo = (UserinfoDto) o;
        return Objects.equals(this.getSub(), userinfo.getSub()) &&
                Objects.equals(this.getName(), userinfo.getName()) &&
                Objects.equals(this.getEmail(), userinfo.getEmail()) &&
                super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getSub(), getName(), getEmail());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("UserinfoDto {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    sub: ").append(toIndentedString(getSub())).append("\n");
        sb.append("    name: ").append(toIndentedString(getName())).append("\n");
        sb.append("    email: ").append(toIndentedString(getEmail())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

