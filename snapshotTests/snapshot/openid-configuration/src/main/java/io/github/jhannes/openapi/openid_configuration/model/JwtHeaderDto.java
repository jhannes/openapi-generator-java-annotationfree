/*
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.openid_configuration.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* JwtHeaderDto
*/
public class JwtHeaderDto {

    private String typ = null;

    private String kid = null;

    private String alg = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
    }

    public <T extends JwtHeaderDto> T copyTo(T target) {
        if (this.getTyp() != null) target.setTyp(this.getTyp());
        if (this.getKid() != null) target.setKid(this.getKid());
        if (this.getAlg() != null) target.setAlg(this.getAlg());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Type of JWT
     * example: JWT
     * @return typ
     */
    public String getTyp() {
        return typ;
    }

    public void setTyp(String typ) {
        this.typ = typ;
    }

    public JwtHeaderDto typ(String typ) {
        this.typ = typ;
        return this;
    }

    /**
     * Key ID - used to look up the public key/X.509 certificate in the JWKS
     * @return kid
     */
    public String getKid() {
        return kid;
    }

    public void setKid(String kid) {
        this.kid = kid;
    }

    public JwtHeaderDto kid(String kid) {
        this.kid = kid;
        return this;
    }

    /**
     * Algorithm used to sign the JWT. Normally RS256 (RSA signed SHA-256)
     * @return alg
     */
    public String getAlg() {
        return alg;
    }

    public void setAlg(String alg) {
        this.alg = alg;
    }

    public JwtHeaderDto alg(String alg) {
        this.alg = alg;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JwtHeaderDto jwtHeader = (JwtHeaderDto) o;
        return Objects.equals(this.getTyp(), jwtHeader.getTyp()) &&
                Objects.equals(this.getKid(), jwtHeader.getKid()) &&
                Objects.equals(this.getAlg(), jwtHeader.getAlg());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getTyp(), getKid(), getAlg());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("JwtHeaderDto {\n");
        sb.append("    typ: ").append(toIndentedString(getTyp())).append("\n");
        sb.append("    kid: ").append(toIndentedString(getKid())).append("\n");
        sb.append("    alg: ").append(toIndentedString(getAlg())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

