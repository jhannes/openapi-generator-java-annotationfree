/*
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.openid_configuration.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* DiscoveryDocumentDto
*/
public class DiscoveryDocumentDto {

    private String issuer = null;

    private String authorization_endpoint = null;

    private String token_endpoint = null;

    private String end_session_endpoint = null;

    private String jwks_uri = null;

    /**
     * Gets or Sets responseTypesSupported
     */
    public enum ResponseTypesSupportedEnum {

        CODE("code"),
        TOKEN("token"),
        ID_TOKEN("id_token");

        private String value;

        ResponseTypesSupportedEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ResponseTypesSupportedEnum fromValue(String text) {
            for (ResponseTypesSupportedEnum b : ResponseTypesSupportedEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private List<ResponseTypesSupportedEnum> response_types_supported = null;

    /**
     * Gets or Sets responseModesSupported
     */
    public enum ResponseModesSupportedEnum {

        QUERY("query"),
        FRAGMENT("fragment");

        private String value;

        ResponseModesSupportedEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ResponseModesSupportedEnum fromValue(String text) {
            for (ResponseModesSupportedEnum b : ResponseModesSupportedEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private List<ResponseModesSupportedEnum> response_modes_supported = null;

    /**
     * Gets or Sets subjectTypesSupported
     */
    public enum SubjectTypesSupportedEnum {

        PAIRWISE("pairwise"),
        PUBLIC("public");

        private String value;

        SubjectTypesSupportedEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SubjectTypesSupportedEnum fromValue(String text) {
            for (SubjectTypesSupportedEnum b : SubjectTypesSupportedEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private List<SubjectTypesSupportedEnum> subject_types_supported = null;

    /**
     * Gets or Sets codeChallengeMethodsSupported
     */
    public enum CodeChallengeMethodsSupportedEnum {

        S256("S256"),
        PLAIN("plain");

        private String value;

        CodeChallengeMethodsSupportedEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CodeChallengeMethodsSupportedEnum fromValue(String text) {
            for (CodeChallengeMethodsSupportedEnum b : CodeChallengeMethodsSupportedEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private List<CodeChallengeMethodsSupportedEnum> code_challenge_methods_supported = null;

    /**
     * Gets or Sets idTokenSigningAlgValuesSupported
     */
    public enum IdTokenSigningAlgValuesSupportedEnum {

        RS256("RS256");

        private String value;

        IdTokenSigningAlgValuesSupportedEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static IdTokenSigningAlgValuesSupportedEnum fromValue(String text) {
            for (IdTokenSigningAlgValuesSupportedEnum b : IdTokenSigningAlgValuesSupportedEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private List<IdTokenSigningAlgValuesSupportedEnum> id_token_signing_alg_values_supported = null;

    private String x_sso_frame = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
    }

    public <T extends DiscoveryDocumentDto> T copyTo(T target) {
        if (this.getIssuer() != null) target.setIssuer(this.getIssuer());
        if (this.getAuthorizationEndpoint() != null) target.setAuthorizationEndpoint(this.getAuthorizationEndpoint());
        if (this.getTokenEndpoint() != null) target.setTokenEndpoint(this.getTokenEndpoint());
        if (this.getEndSessionEndpoint() != null) target.setEndSessionEndpoint(this.getEndSessionEndpoint());
        if (this.getJwksUri() != null) target.setJwksUri(this.getJwksUri());
        if (this.getResponseTypesSupported() != null) target.setResponseTypesSupported(this.getResponseTypesSupported());
        if (this.getResponseModesSupported() != null) target.setResponseModesSupported(this.getResponseModesSupported());
        if (this.getSubjectTypesSupported() != null) target.setSubjectTypesSupported(this.getSubjectTypesSupported());
        if (this.getCodeChallengeMethodsSupported() != null) target.setCodeChallengeMethodsSupported(this.getCodeChallengeMethodsSupported());
        if (this.getIdTokenSigningAlgValuesSupported() != null) target.setIdTokenSigningAlgValuesSupported(this.getIdTokenSigningAlgValuesSupported());
        if (this.getxSsoFrame() != null) target.setxSsoFrame(this.getxSsoFrame());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get issuer
     * @return issuer
     */
    public String getIssuer() {
        return issuer;
    }

    public void setIssuer(String issuer) {
        this.issuer = issuer;
    }

    public DiscoveryDocumentDto issuer(String issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Get authorization_endpoint
     * @return authorization_endpoint
     */
    public String getAuthorizationEndpoint() {
        return authorization_endpoint;
    }

    public void setAuthorizationEndpoint(String authorizationEndpoint) {
        this.authorization_endpoint = authorizationEndpoint;
    }

    public DiscoveryDocumentDto authorizationEndpoint(String authorizationEndpoint) {
        this.authorization_endpoint = authorizationEndpoint;
        return this;
    }

    /**
     * Get token_endpoint
     * @return token_endpoint
     */
    public String getTokenEndpoint() {
        return token_endpoint;
    }

    public void setTokenEndpoint(String tokenEndpoint) {
        this.token_endpoint = tokenEndpoint;
    }

    public DiscoveryDocumentDto tokenEndpoint(String tokenEndpoint) {
        this.token_endpoint = tokenEndpoint;
        return this;
    }

    /**
     * Get end_session_endpoint
     * @return end_session_endpoint
     */
    public String getEndSessionEndpoint() {
        return end_session_endpoint;
    }

    public void setEndSessionEndpoint(String endSessionEndpoint) {
        this.end_session_endpoint = endSessionEndpoint;
    }

    public DiscoveryDocumentDto endSessionEndpoint(String endSessionEndpoint) {
        this.end_session_endpoint = endSessionEndpoint;
        return this;
    }

    /**
     * Get jwks_uri
     * @return jwks_uri
     */
    public String getJwksUri() {
        return jwks_uri;
    }

    public void setJwksUri(String jwksUri) {
        this.jwks_uri = jwksUri;
    }

    public DiscoveryDocumentDto jwksUri(String jwksUri) {
        this.jwks_uri = jwksUri;
        return this;
    }

    public <T> DiscoveryDocumentDto responseTypesSupported(Collection<T> items, Function<T, ResponseTypesSupportedEnum> mapper) {
        return responseTypesSupported(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getResponseTypesSupported(Function<ResponseTypesSupportedEnum, T> mapper) {
        return getResponseTypesSupported().stream().map(mapper).collect(Collectors.toList());
    }

    public DiscoveryDocumentDto addResponseTypesSupportedItem(ResponseTypesSupportedEnum responseTypesSupportedItem) {
        if (this.response_types_supported == null) {
            this.response_types_supported = new ArrayList<>();
        }
        this.response_types_supported.add(responseTypesSupportedItem);
        return this;
    }

    /**
     * Get response_types_supported
     * @return response_types_supported
     */
    public List<ResponseTypesSupportedEnum> getResponseTypesSupported() {
        return response_types_supported;
    }

    public void setResponseTypesSupported(List<ResponseTypesSupportedEnum> responseTypesSupported) {
        this.response_types_supported = responseTypesSupported;
    }

    public DiscoveryDocumentDto responseTypesSupported(List<ResponseTypesSupportedEnum> responseTypesSupported) {
        this.response_types_supported = responseTypesSupported;
        return this;
    }

    public <T> DiscoveryDocumentDto responseModesSupported(Collection<T> items, Function<T, ResponseModesSupportedEnum> mapper) {
        return responseModesSupported(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getResponseModesSupported(Function<ResponseModesSupportedEnum, T> mapper) {
        return getResponseModesSupported().stream().map(mapper).collect(Collectors.toList());
    }

    public DiscoveryDocumentDto addResponseModesSupportedItem(ResponseModesSupportedEnum responseModesSupportedItem) {
        if (this.response_modes_supported == null) {
            this.response_modes_supported = new ArrayList<>();
        }
        this.response_modes_supported.add(responseModesSupportedItem);
        return this;
    }

    /**
     * Get response_modes_supported
     * @return response_modes_supported
     */
    public List<ResponseModesSupportedEnum> getResponseModesSupported() {
        return response_modes_supported;
    }

    public void setResponseModesSupported(List<ResponseModesSupportedEnum> responseModesSupported) {
        this.response_modes_supported = responseModesSupported;
    }

    public DiscoveryDocumentDto responseModesSupported(List<ResponseModesSupportedEnum> responseModesSupported) {
        this.response_modes_supported = responseModesSupported;
        return this;
    }

    public <T> DiscoveryDocumentDto subjectTypesSupported(Collection<T> items, Function<T, SubjectTypesSupportedEnum> mapper) {
        return subjectTypesSupported(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getSubjectTypesSupported(Function<SubjectTypesSupportedEnum, T> mapper) {
        return getSubjectTypesSupported().stream().map(mapper).collect(Collectors.toList());
    }

    public DiscoveryDocumentDto addSubjectTypesSupportedItem(SubjectTypesSupportedEnum subjectTypesSupportedItem) {
        if (this.subject_types_supported == null) {
            this.subject_types_supported = new ArrayList<>();
        }
        this.subject_types_supported.add(subjectTypesSupportedItem);
        return this;
    }

    /**
     * Get subject_types_supported
     * @return subject_types_supported
     */
    public List<SubjectTypesSupportedEnum> getSubjectTypesSupported() {
        return subject_types_supported;
    }

    public void setSubjectTypesSupported(List<SubjectTypesSupportedEnum> subjectTypesSupported) {
        this.subject_types_supported = subjectTypesSupported;
    }

    public DiscoveryDocumentDto subjectTypesSupported(List<SubjectTypesSupportedEnum> subjectTypesSupported) {
        this.subject_types_supported = subjectTypesSupported;
        return this;
    }

    public <T> DiscoveryDocumentDto codeChallengeMethodsSupported(Collection<T> items, Function<T, CodeChallengeMethodsSupportedEnum> mapper) {
        return codeChallengeMethodsSupported(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getCodeChallengeMethodsSupported(Function<CodeChallengeMethodsSupportedEnum, T> mapper) {
        return getCodeChallengeMethodsSupported().stream().map(mapper).collect(Collectors.toList());
    }

    public DiscoveryDocumentDto addCodeChallengeMethodsSupportedItem(CodeChallengeMethodsSupportedEnum codeChallengeMethodsSupportedItem) {
        if (this.code_challenge_methods_supported == null) {
            this.code_challenge_methods_supported = new ArrayList<>();
        }
        this.code_challenge_methods_supported.add(codeChallengeMethodsSupportedItem);
        return this;
    }

    /**
     * Get code_challenge_methods_supported
     * @return code_challenge_methods_supported
     */
    public List<CodeChallengeMethodsSupportedEnum> getCodeChallengeMethodsSupported() {
        return code_challenge_methods_supported;
    }

    public void setCodeChallengeMethodsSupported(List<CodeChallengeMethodsSupportedEnum> codeChallengeMethodsSupported) {
        this.code_challenge_methods_supported = codeChallengeMethodsSupported;
    }

    public DiscoveryDocumentDto codeChallengeMethodsSupported(List<CodeChallengeMethodsSupportedEnum> codeChallengeMethodsSupported) {
        this.code_challenge_methods_supported = codeChallengeMethodsSupported;
        return this;
    }

    public <T> DiscoveryDocumentDto idTokenSigningAlgValuesSupported(Collection<T> items, Function<T, IdTokenSigningAlgValuesSupportedEnum> mapper) {
        return idTokenSigningAlgValuesSupported(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getIdTokenSigningAlgValuesSupported(Function<IdTokenSigningAlgValuesSupportedEnum, T> mapper) {
        return getIdTokenSigningAlgValuesSupported().stream().map(mapper).collect(Collectors.toList());
    }

    public DiscoveryDocumentDto addIdTokenSigningAlgValuesSupportedItem(IdTokenSigningAlgValuesSupportedEnum idTokenSigningAlgValuesSupportedItem) {
        if (this.id_token_signing_alg_values_supported == null) {
            this.id_token_signing_alg_values_supported = new ArrayList<>();
        }
        this.id_token_signing_alg_values_supported.add(idTokenSigningAlgValuesSupportedItem);
        return this;
    }

    /**
     * Get id_token_signing_alg_values_supported
     * @return id_token_signing_alg_values_supported
     */
    public List<IdTokenSigningAlgValuesSupportedEnum> getIdTokenSigningAlgValuesSupported() {
        return id_token_signing_alg_values_supported;
    }

    public void setIdTokenSigningAlgValuesSupported(List<IdTokenSigningAlgValuesSupportedEnum> idTokenSigningAlgValuesSupported) {
        this.id_token_signing_alg_values_supported = idTokenSigningAlgValuesSupported;
    }

    public DiscoveryDocumentDto idTokenSigningAlgValuesSupported(List<IdTokenSigningAlgValuesSupportedEnum> idTokenSigningAlgValuesSupported) {
        this.id_token_signing_alg_values_supported = idTokenSigningAlgValuesSupported;
        return this;
    }

    /**
     * Get x_sso_frame
     * @return x_sso_frame
     */
    public String getxSsoFrame() {
        return x_sso_frame;
    }

    public void setxSsoFrame(String xSsoFrame) {
        this.x_sso_frame = xSsoFrame;
    }

    public DiscoveryDocumentDto xSsoFrame(String xSsoFrame) {
        this.x_sso_frame = xSsoFrame;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DiscoveryDocumentDto discoveryDocument = (DiscoveryDocumentDto) o;
        return Objects.equals(this.getIssuer(), discoveryDocument.getIssuer()) &&
                Objects.equals(this.getAuthorizationEndpoint(), discoveryDocument.getAuthorizationEndpoint()) &&
                Objects.equals(this.getTokenEndpoint(), discoveryDocument.getTokenEndpoint()) &&
                Objects.equals(this.getEndSessionEndpoint(), discoveryDocument.getEndSessionEndpoint()) &&
                Objects.equals(this.getJwksUri(), discoveryDocument.getJwksUri()) &&
                Objects.equals(this.getResponseTypesSupported(), discoveryDocument.getResponseTypesSupported()) &&
                Objects.equals(this.getResponseModesSupported(), discoveryDocument.getResponseModesSupported()) &&
                Objects.equals(this.getSubjectTypesSupported(), discoveryDocument.getSubjectTypesSupported()) &&
                Objects.equals(this.getCodeChallengeMethodsSupported(), discoveryDocument.getCodeChallengeMethodsSupported()) &&
                Objects.equals(this.getIdTokenSigningAlgValuesSupported(), discoveryDocument.getIdTokenSigningAlgValuesSupported()) &&
                Objects.equals(this.getxSsoFrame(), discoveryDocument.getxSsoFrame());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIssuer(), getAuthorizationEndpoint(), getTokenEndpoint(), getEndSessionEndpoint(), getJwksUri(), getResponseTypesSupported(), getResponseModesSupported(), getSubjectTypesSupported(), getCodeChallengeMethodsSupported(), getIdTokenSigningAlgValuesSupported(), getxSsoFrame());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("DiscoveryDocumentDto {\n");
        sb.append("    issuer: ").append(toIndentedString(getIssuer())).append("\n");
        sb.append("    authorization_endpoint: ").append(toIndentedString(getAuthorizationEndpoint())).append("\n");
        sb.append("    token_endpoint: ").append(toIndentedString(getTokenEndpoint())).append("\n");
        sb.append("    end_session_endpoint: ").append(toIndentedString(getEndSessionEndpoint())).append("\n");
        sb.append("    jwks_uri: ").append(toIndentedString(getJwksUri())).append("\n");
        sb.append("    response_types_supported: ").append(toIndentedString(getResponseTypesSupported())).append("\n");
        sb.append("    response_modes_supported: ").append(toIndentedString(getResponseModesSupported())).append("\n");
        sb.append("    subject_types_supported: ").append(toIndentedString(getSubjectTypesSupported())).append("\n");
        sb.append("    code_challenge_methods_supported: ").append(toIndentedString(getCodeChallengeMethodsSupported())).append("\n");
        sb.append("    id_token_signing_alg_values_supported: ").append(toIndentedString(getIdTokenSigningAlgValuesSupported())).append("\n");
        sb.append("    x_sso_frame: ").append(toIndentedString(getxSsoFrame())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

