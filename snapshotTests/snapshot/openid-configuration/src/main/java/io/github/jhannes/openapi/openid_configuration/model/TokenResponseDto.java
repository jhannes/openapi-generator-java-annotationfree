/*
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.openid_configuration.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* Token response according to https://www.oauth.com/oauth2-servers/access-tokens/access-token-response/
*/
public class TokenResponseDto {

    private String access_token;

    private String token_type;

    private Integer expires_in = null;

    private String scope = null;

    private String id_token = null;

    private String refresh_token = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "access_token",
                "token_type",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getAccessToken())) result.add("access_token");
        if (isMissing(getTokenType())) result.add("token_type");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
    }

    public <T extends TokenResponseDto> T copyTo(T target) {
        if (this.getAccessToken() != null) target.setAccessToken(this.getAccessToken());
        if (this.getTokenType() != null) target.setTokenType(this.getTokenType());
        if (this.getExpiresIn() != null) target.setExpiresIn(this.getExpiresIn());
        if (this.getScope() != null) target.setScope(this.getScope());
        if (this.getIdToken() != null) target.setIdToken(this.getIdToken());
        if (this.getRefreshToken() != null) target.setRefreshToken(this.getRefreshToken());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get access_token
     * @return access_token
     */
    public String getAccessToken() {
        return access_token;
    }

    public void setAccessToken(String accessToken) {
        this.access_token = accessToken;
    }

    public TokenResponseDto accessToken(String accessToken) {
        this.access_token = accessToken;
        return this;
    }

    /**
     * The type of token this is. Always the string &#39;bearer&#39;
     * example: bearer
     * @return token_type
     */
    public String getTokenType() {
        return token_type;
    }

    public void setTokenType(String tokenType) {
        this.token_type = tokenType;
    }

    public TokenResponseDto tokenType(String tokenType) {
        this.token_type = tokenType;
        return this;
    }

    /**
     * The duration of time the access token is granted for in seconds
     * @return expires_in
     */
    public Integer getExpiresIn() {
        return expires_in;
    }

    public void setExpiresIn(Integer expiresIn) {
        this.expires_in = expiresIn;
    }

    public TokenResponseDto expiresIn(Integer expiresIn) {
        this.expires_in = expiresIn;
        return this;
    }

    /**
     * Space separated list of granted scopes for the access_token
     * @return scope
     */
    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    public TokenResponseDto scope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * JWT which has format base64(JwtHeader) + &#39;.&#39; base64(JwtPayload) + &#39;.&#39; + base64(signature)
     * @return id_token
     */
    public String getIdToken() {
        return id_token;
    }

    public void setIdToken(String idToken) {
        this.id_token = idToken;
    }

    public TokenResponseDto idToken(String idToken) {
        this.id_token = idToken;
        return this;
    }

    /**
     * Get refresh_token
     * @return refresh_token
     */
    public String getRefreshToken() {
        return refresh_token;
    }

    public void setRefreshToken(String refreshToken) {
        this.refresh_token = refreshToken;
    }

    public TokenResponseDto refreshToken(String refreshToken) {
        this.refresh_token = refreshToken;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TokenResponseDto tokenResponse = (TokenResponseDto) o;
        return Objects.equals(this.getAccessToken(), tokenResponse.getAccessToken()) &&
                Objects.equals(this.getTokenType(), tokenResponse.getTokenType()) &&
                Objects.equals(this.getExpiresIn(), tokenResponse.getExpiresIn()) &&
                Objects.equals(this.getScope(), tokenResponse.getScope()) &&
                Objects.equals(this.getIdToken(), tokenResponse.getIdToken()) &&
                Objects.equals(this.getRefreshToken(), tokenResponse.getRefreshToken());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAccessToken(), getTokenType(), getExpiresIn(), getScope(), getIdToken(), getRefreshToken());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("TokenResponseDto {\n");
        sb.append("    access_token: ").append(toIndentedString(getAccessToken())).append("\n");
        sb.append("    token_type: ").append(toIndentedString(getTokenType())).append("\n");
        sb.append("    expires_in: ").append(toIndentedString(getExpiresIn())).append("\n");
        sb.append("    scope: ").append(toIndentedString(getScope())).append("\n");
        sb.append("    id_token: ").append(toIndentedString(getIdToken())).append("\n");
        sb.append("    refresh_token: ").append(toIndentedString(getRefreshToken())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

