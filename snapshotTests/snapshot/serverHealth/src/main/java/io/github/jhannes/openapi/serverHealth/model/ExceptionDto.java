/*
 * Health API
 * Returns the status of the service
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.serverHealth.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* ExceptionDto
*/
public class ExceptionDto {

    private String type;

    private String message = null;

    private List<StackTraceInnerDto> stackTrace = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "type",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getType())) result.add("type");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (stackTrace != null) {
            stackTrace.forEach(o -> o.readOnlyFieldsWithValue(result));
        }
    }

    public <T extends ExceptionDto> T copyTo(T target) {
        if (this.getType() != null) target.setType(this.getType());
        if (this.getMessage() != null) target.setMessage(this.getMessage());
        if (this.getStackTrace() != null) target.setStackTrace(this.getStackTrace());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get type
     * @return type
     */
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public ExceptionDto type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get message
     * @return message
     */
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public ExceptionDto message(String message) {
        this.message = message;
        return this;
    }

    public <T> ExceptionDto stackTrace(Collection<T> items, Function<T, StackTraceInnerDto> mapper) {
        return stackTrace(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getStackTrace(Function<StackTraceInnerDto, T> mapper) {
        return getStackTrace().stream().map(mapper).collect(Collectors.toList());
    }

    public ExceptionDto addStackTraceItem(StackTraceInnerDto stackTraceItem) {
        if (this.stackTrace == null) {
            this.stackTrace = new ArrayList<>();
        }
        this.stackTrace.add(stackTraceItem);
        return this;
    }

    /**
     * Get stackTrace
     * @return stackTrace
     */
    public List<StackTraceInnerDto> getStackTrace() {
        return stackTrace;
    }

    public void setStackTrace(List<StackTraceInnerDto> stackTrace) {
        this.stackTrace = stackTrace;
    }

    public ExceptionDto stackTrace(List<StackTraceInnerDto> stackTrace) {
        this.stackTrace = stackTrace;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExceptionDto exception = (ExceptionDto) o;
        return Objects.equals(this.getType(), exception.getType()) &&
                Objects.equals(this.getMessage(), exception.getMessage()) &&
                Objects.equals(this.getStackTrace(), exception.getStackTrace());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getType(), getMessage(), getStackTrace());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("ExceptionDto {\n");
        sb.append("    type: ").append(toIndentedString(getType())).append("\n");
        sb.append("    message: ").append(toIndentedString(getMessage())).append("\n");
        sb.append("    stackTrace: ").append(toIndentedString(getStackTrace())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

