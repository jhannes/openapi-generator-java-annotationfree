/*
 * Health API
 * Returns the status of the service
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.jhannes.openapi.serverHealth.model;


import java.net.URI;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;

import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

/**
 * Model tests for Health API
 */
public class SampleModelData {

    public SampleModelData(Random random) {
        this.random = random;
    }

    public SampleModelData(long seed) {
        this(new Random(seed));
    }

    public DataSourceHealthDetailsDto sampleDataSourceHealthDetailsDto(String propertyName) {
        return sampleDataSourceHealthDetailsDto();
    }

    public DataSourceHealthDetailsDto sampleDataSourceHealthDetailsDto() {
        return new DataSourceHealthDetailsDto()
            .type("DataSourceHealthDetails")
            .url(sampleString("url"))
            .lastAliveTime(sampleOffsetDateTime("lastAliveTime"))
            .lastFailureException(sampleExceptionDto("lastFailureException"));
    }

    public List<DataSourceHealthDetailsDto> sampleListOfDataSourceHealthDetailsDto(String propertyName) {
        return sampleListOfDataSourceHealthDetailsDto();
    }

    public List<DataSourceHealthDetailsDto> sampleListOfDataSourceHealthDetailsDto() {
        return sampleList(() -> sampleDataSourceHealthDetailsDto());
    }

    public ExceptionDto sampleExceptionDto(String propertyName) {
        return sampleExceptionDto();
    }

    public ExceptionDto sampleExceptionDto() {
        return new ExceptionDto()
            .type(sampleString("type", "className"))
            .message(sampleString("message"))
            .stackTrace(sampleListOfStackTraceInnerDto("stackTrace"));
    }

    public List<ExceptionDto> sampleListOfExceptionDto(String propertyName) {
        return sampleListOfExceptionDto();
    }

    public List<ExceptionDto> sampleListOfExceptionDto() {
        return sampleList(() -> sampleExceptionDto());
    }

    public HealthComponentDto sampleHealthComponentDto(String propertyName) {
        return sampleHealthComponentDto();
    }

    public HealthComponentDto sampleHealthComponentDto() {
        return new HealthComponentDto()
            .status(sampleHealthStatusDto("status"))
            .details(sampleHealthDetailsDto("details"))
            .time(sampleOffsetDateTime("time"));
    }

    public List<HealthComponentDto> sampleListOfHealthComponentDto(String propertyName) {
        return sampleListOfHealthComponentDto();
    }

    public List<HealthComponentDto> sampleListOfHealthComponentDto() {
        return sampleList(() -> sampleHealthComponentDto());
    }

    public HealthComponentFailureDetailsDto sampleHealthComponentFailureDetailsDto(String propertyName) {
        return sampleHealthComponentFailureDetailsDto();
    }

    public HealthComponentFailureDetailsDto sampleHealthComponentFailureDetailsDto() {
        return new HealthComponentFailureDetailsDto()
            .type("HealthComponentFailureDetails")
            .exception(sampleExceptionDto("exception"));
    }

    public List<HealthComponentFailureDetailsDto> sampleListOfHealthComponentFailureDetailsDto(String propertyName) {
        return sampleListOfHealthComponentFailureDetailsDto();
    }

    public List<HealthComponentFailureDetailsDto> sampleListOfHealthComponentFailureDetailsDto() {
        return sampleList(() -> sampleHealthComponentFailureDetailsDto());
    }

    public HealthDetailsDto sampleHealthDetailsDto(String propertyName) {
        return sampleHealthDetailsDto();
    }

    public HealthDetailsDto sampleHealthDetailsDto() {
        List<Supplier<HealthDetailsDto>> factories = List.of(
            () -> sampleDataSourceHealthDetailsDto().type("DataSourceHealthDetails"),
            () -> sampleHealthComponentFailureDetailsDto().type("HealthComponentFailureDetails"),
            () -> sampleThreadHealthDetailsDto().type("ThreadHealthDetails")
        );
        return pickOne(factories).get();
    }

    public List<HealthDetailsDto> sampleListOfHealthDetailsDto(String propertyName) {
        return sampleListOfHealthDetailsDto();
    }

    public List<HealthDetailsDto> sampleListOfHealthDetailsDto() {
        return sampleList(() -> sampleHealthDetailsDto());
    }

    public HealthOverviewDto sampleHealthOverviewDto(String propertyName) {
        return sampleHealthOverviewDto();
    }

    public HealthOverviewDto sampleHealthOverviewDto() {
        return new HealthOverviewDto()
            .components(sampleMap(() -> sampleHealthStatusDto("components"), "components"));
    }

    public List<HealthOverviewDto> sampleListOfHealthOverviewDto(String propertyName) {
        return sampleListOfHealthOverviewDto();
    }

    public List<HealthOverviewDto> sampleListOfHealthOverviewDto() {
        return sampleList(() -> sampleHealthOverviewDto());
    }

    public HealthStatusDto sampleHealthStatusDto(String propertyName) {
        return sampleHealthStatusDto();
    }

    public HealthStatusDto sampleHealthStatusDto() {
        return pickOne(HealthStatusDto.values());
    }

    public List<HealthStatusDto> sampleListOfHealthStatusDto(String propertyName) {
        return sampleListOfHealthStatusDto();
    }

    public List<HealthStatusDto> sampleListOfHealthStatusDto() {
        return pickSome(HealthStatusDto.values());
    }

    public HealthSummaryDto sampleHealthSummaryDto(String propertyName) {
        return sampleHealthSummaryDto();
    }

    public HealthSummaryDto sampleHealthSummaryDto() {
        return new HealthSummaryDto()
            .status(sampleHealthStatusDto("status"))
            .components(sampleMap(() -> sampleHealthComponentDto("components"), "components"));
    }

    public List<HealthSummaryDto> sampleListOfHealthSummaryDto(String propertyName) {
        return sampleListOfHealthSummaryDto();
    }

    public List<HealthSummaryDto> sampleListOfHealthSummaryDto() {
        return sampleList(() -> sampleHealthSummaryDto());
    }

    public StackTraceInnerDto sampleStackTraceInnerDto(String propertyName) {
        return sampleStackTraceInnerDto();
    }

    public StackTraceInnerDto sampleStackTraceInnerDto() {
        return new StackTraceInnerDto()
            .className(sampleString("className", "className"))
            .methodName(sampleString("methodName"))
            .fileName(sampleString("fileName"))
            .lineNumber(sampleInteger("lineNumber"));
    }

    public List<StackTraceInnerDto> sampleListOfStackTraceInnerDto(String propertyName) {
        return sampleListOfStackTraceInnerDto();
    }

    public List<StackTraceInnerDto> sampleListOfStackTraceInnerDto() {
        return sampleList(() -> sampleStackTraceInnerDto());
    }

    public ThreadHealthDetailsDto sampleThreadHealthDetailsDto(String propertyName) {
        return sampleThreadHealthDetailsDto();
    }

    public ThreadHealthDetailsDto sampleThreadHealthDetailsDto() {
        return new ThreadHealthDetailsDto()
            .type("ThreadHealthDetails")
            .threadState(sampleThreadHealthDetailsDtoThreadStateEnum("threadState"))
            .stackTrace(sampleListOfStackTraceInnerDto("stackTrace"))
            .lastAliveTime(sampleOffsetDateTime("lastAliveTime"))
            .lastSuccessTime(sampleOffsetDateTime("lastSuccessTime"))
            .lastFailureTime(sampleOffsetDateTime("lastFailureTime"))
            .lastFailureException(sampleExceptionDto("lastFailureException"));
    }

    public List<ThreadHealthDetailsDto> sampleListOfThreadHealthDetailsDto(String propertyName) {
        return sampleListOfThreadHealthDetailsDto();
    }

    public List<ThreadHealthDetailsDto> sampleListOfThreadHealthDetailsDto() {
        return sampleList(() -> sampleThreadHealthDetailsDto());
    }

    public ThreadHealthDetailsDto.ThreadStateEnum sampleThreadHealthDetailsDtoThreadStateEnum(String propertyName) {
        return pickOne(ThreadHealthDetailsDto.ThreadStateEnum.values());
    }

    protected final Random random;
    protected final Map<String, Supplier<String>> dataFormatFactories = new HashMap<>(Map.of(
        "email", this::randomEmail,
        "phone", this::randomPhoneNumber
    ));
    protected final Map<String, Supplier<String>> propertyNameFactories = new HashMap<>(Map.of(
        "givenName", this::randomGivenName,
        "familyName", this::randomFamilyName,
        "personName", this::randomPersonName
    ));

    public <T> List<T> sampleList(Supplier<T> supplier, String propertyName) {
        return sampleList(supplier, propertyName, 1, 4);
    }

    public <T> List<T> sampleList(Supplier<T> supplier) {
        return sampleList(supplier, 1, 4);
    }

    public <T> List<T> sampleList(Supplier<T> supplier, String propertyName, int min, int max) {
        return sampleList(supplier, min, max);
    }

    public <T> List<T> sampleList(Supplier<T> supplier, int min, int max) {
        List<T> result = new ArrayList<>();
        int count = min + random.nextInt(max - min);
        for (int i=0; i<count; i++) {
            result.add(supplier.get());
        }
        return result;
    }

    public <T> Set<T> sampleSet(Supplier<T> supplier, String propertyName) {
        return sampleSet(supplier, propertyName, 1, 4);
    }

    public <T> Set<T> sampleSet(Supplier<T> supplier) {
        return sampleSet(supplier, 1, 4);
    }

    public <T> Set<T> sampleSet(Supplier<T> supplier, String propertyName, int min, int max) {
        return sampleSet(supplier, min, max);
    }

    public <T> Set<T> sampleSet(Supplier<T> supplier, int min, int max) {
        Set<T> result = new LinkedHashSet<>();
        int count = min + random.nextInt(max - min);
        for (int i=0; i<count; i++) {
            result.add(supplier.get());
        }
        return result;
    }

    public <T> List<T> pickSome(T[] alternatives) {
        return pickSome(alternatives, 1, 4);
    }

    public <T> List<T> pickSome(T[] alternatives, int min, int max) {
        int count = min + random.nextInt(max - min);
        List<T> result = new ArrayList<>(List.of(alternatives));
        Collections.shuffle(result);
        return result.subList(0, count);
    }

    public <T> Set<T> sampleSubset(T[] alternatives) {
        return new LinkedHashSet<>(pickSome(alternatives, 1, 4));
    }

    public <T> Set<T> sampleSubset(T[] alternatives, int min, int max) {
        return new LinkedHashSet<>(pickSome(alternatives, min, max));
    }

    public <T> Map<String, T> sampleMap(Supplier<T> supplier, String propertyName) {
        return sampleMap(supplier, propertyName, 1, 4);
    }

    public <T> Map<String, T> sampleMap(Supplier<T> supplier, String propertyName, int min, int max) {
        Map<String, T> result = new HashMap<>();
        int count = min + random.nextInt(max - min);
        for (int i=0; i<count; i++) {
            result.put(sampleString(propertyName), supplier.get());
        }
        return result;
    }

    public String sampleString(String propertyName, String dataFormat) {
        if (dataFormatFactories.containsKey(dataFormat)) {
            return dataFormatFactories.get(dataFormat).get();
        }
        if (propertyNameFactories.containsKey(propertyName)) {
            return propertyNameFactories.get(propertyName).get();
        }
        return "str" + sampleUUID(propertyName);
    }

    public String sampleString(String propertyName) {
        return sampleString(propertyName, null);
    }

    public UUID sampleUUID(String propertyName) {
        byte[] bytes = new byte[16];
        random.nextBytes(bytes);
        return UUID.nameUUIDFromBytes(bytes);
    }

    public Long sampleLong(String propertyName) {
        return random.nextLong() % 10000L;
    }

    public Integer sampleInteger(String propertyName) {
        return random.nextInt(10000);
    }

    public Double sampleDouble(String propertyName) {
        return random.nextDouble() * 10000.0;
    }

    public Boolean sampleBoolean(String propertyName) {
        return random.nextBoolean();
    }

    public Object sampleObject(String propertyName) {
        Map<String, String> result = new HashMap<>();
        result.put(sampleString(propertyName + ".key"), sampleString(propertyName + ".value"));
        return result;
    }

    public LocalDate sampleLocalDate(String propertyName) {
        return LocalDate.of(2022, 1, 1).plusDays(random.nextInt(1000));
    }

    public LocalTime sampleLocalTime(String propertyName) {
        return LocalTime.of(0, 0).plusMinutes(random.nextInt(24*60));
    }

    public LocalDateTime sampleLocalDateTime(String propertyName) {
        return LocalDateTime.of(
            sampleLocalDate(propertyName), sampleLocalTime(propertyName)
        );
    }

    public ZoneId sampleZoneId(String propertyName) {
        return ZoneId.of(pickOne(ZoneId.getAvailableZoneIds()));
    }

    public ZonedDateTime sampleZonedDateTime(String propertyName) {
        return ZonedDateTime.of(
            sampleLocalDateTime(propertyName), sampleZoneId(propertyName)
        );
    }

    public OffsetDateTime sampleOffsetDateTime(String propertyName) {
        return sampleZonedDateTime(propertyName).toOffsetDateTime();
    }

    public Instant sampleInstant(String propertyName) {
        return sampleZonedDateTime(propertyName).toInstant();
    }

    public URI sampleURI(String propertyName) {
        return asURI("https://" + randomDomainName());
    }

    public String randomDomainName() {
        return pickOne(List.of("a", "b", "c")) +
            ".example." +
            pickOne(List.of("com", "net", "io"));
    }

    public String randomEmail() {
        return (
            randomGivenName().toLowerCase() +
            "." +
            randomFamilyName().toLowerCase() +
            "@" +
            randomDomainName()
        );
    }

    public String randomPersonName() {
        return randomGivenName() + " " + randomFamilyName();
    }

    public String randomGivenName() {
        return pickOne(List.of("James", "Mary", "John", "Patricia", "Robert", "Jennifer", "Linda"));
    }

    public String randomFamilyName() {
        return pickOne(List.of("Smith", "Williams", "Johnson", "Jones", "Brown", "Davis", "Wilson"));
    }

    public String randomPhoneNumber() {
        return "636-555-" + (1000 + random.nextInt(9000));
    }

    public <T> T pickOne(T[] alternatives) {
        return alternatives[random.nextInt(alternatives.length)];
    }

    public <T> T pickOne(List<T> alternatives) {
        return alternatives.get(random.nextInt(alternatives.size()));
    }

    public <T> T pickOne(Set<T> alternatives) {
        return pickOne(new ArrayList<>(alternatives));
    }

    public static URI asURI(String uri) {
        try {
            return new URI(uri);
        } catch (java.net.URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

}
