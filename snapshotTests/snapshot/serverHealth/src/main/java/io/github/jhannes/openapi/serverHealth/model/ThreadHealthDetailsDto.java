/*
 * Health API
 * Returns the status of the service
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.serverHealth.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* ThreadHealthDetailsDto
*/
public class ThreadHealthDetailsDto implements HealthDetailsDto {

    private String type = "ThreadHealthDetails";

    /**
     * Gets or Sets threadState
     */
    public enum ThreadStateEnum {

        NEW("NEW"),
        RUNNABLE("RUNNABLE"),
        WAITING("WAITING"),
        TIMED_WAITING("TIMED_WAITING"),
        TERMINATED("TERMINATED");

        private String value;

        ThreadStateEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ThreadStateEnum fromValue(String text) {
            for (ThreadStateEnum b : ThreadStateEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private ThreadStateEnum threadState = null;

    private List<StackTraceInnerDto> stackTrace = null;

    private OffsetDateTime lastAliveTime = null;

    private OffsetDateTime lastSuccessTime = null;

    private OffsetDateTime lastFailureTime = null;

    private ExceptionDto lastFailureException = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "type",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getType())) result.add("type");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (stackTrace != null) {
            stackTrace.forEach(o -> o.readOnlyFieldsWithValue(result));
        }
        if (lastFailureException != null) {
            lastFailureException.readOnlyFieldsWithValue(result);
        }
    }

    public <T extends ThreadHealthDetailsDto> T copyTo(T target) {
        if (this.getType() != null) target.setType(this.getType());
        if (this.getThreadState() != null) target.setThreadState(this.getThreadState());
        if (this.getStackTrace() != null) target.setStackTrace(this.getStackTrace());
        if (this.getLastAliveTime() != null) target.setLastAliveTime(this.getLastAliveTime());
        if (this.getLastSuccessTime() != null) target.setLastSuccessTime(this.getLastSuccessTime());
        if (this.getLastFailureTime() != null) target.setLastFailureTime(this.getLastFailureTime());
        if (this.getLastFailureException() != null) target.setLastFailureException(this.getLastFailureException());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get type
     * @return type
     */
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public ThreadHealthDetailsDto type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get threadState
     * @return threadState
     */
    public ThreadStateEnum getThreadState() {
        return threadState;
    }

    public void setThreadState(ThreadStateEnum threadState) {
        this.threadState = threadState;
    }

    public ThreadHealthDetailsDto threadState(ThreadStateEnum threadState) {
        this.threadState = threadState;
        return this;
    }

    public <T> ThreadHealthDetailsDto stackTrace(Collection<T> items, Function<T, StackTraceInnerDto> mapper) {
        return stackTrace(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getStackTrace(Function<StackTraceInnerDto, T> mapper) {
        return getStackTrace().stream().map(mapper).collect(Collectors.toList());
    }

    public ThreadHealthDetailsDto addStackTraceItem(StackTraceInnerDto stackTraceItem) {
        if (this.stackTrace == null) {
            this.stackTrace = new ArrayList<>();
        }
        this.stackTrace.add(stackTraceItem);
        return this;
    }

    /**
     * Get stackTrace
     * @return stackTrace
     */
    public List<StackTraceInnerDto> getStackTrace() {
        return stackTrace;
    }

    public void setStackTrace(List<StackTraceInnerDto> stackTrace) {
        this.stackTrace = stackTrace;
    }

    public ThreadHealthDetailsDto stackTrace(List<StackTraceInnerDto> stackTrace) {
        this.stackTrace = stackTrace;
        return this;
    }

    /**
     * Get lastAliveTime
     * @return lastAliveTime
     */
    public OffsetDateTime getLastAliveTime() {
        return lastAliveTime;
    }

    public void setLastAliveTime(OffsetDateTime lastAliveTime) {
        this.lastAliveTime = lastAliveTime;
    }

    public ThreadHealthDetailsDto lastAliveTime(OffsetDateTime lastAliveTime) {
        this.lastAliveTime = lastAliveTime;
        return this;
    }

    /**
     * Get lastSuccessTime
     * @return lastSuccessTime
     */
    public OffsetDateTime getLastSuccessTime() {
        return lastSuccessTime;
    }

    public void setLastSuccessTime(OffsetDateTime lastSuccessTime) {
        this.lastSuccessTime = lastSuccessTime;
    }

    public ThreadHealthDetailsDto lastSuccessTime(OffsetDateTime lastSuccessTime) {
        this.lastSuccessTime = lastSuccessTime;
        return this;
    }

    /**
     * Get lastFailureTime
     * @return lastFailureTime
     */
    public OffsetDateTime getLastFailureTime() {
        return lastFailureTime;
    }

    public void setLastFailureTime(OffsetDateTime lastFailureTime) {
        this.lastFailureTime = lastFailureTime;
    }

    public ThreadHealthDetailsDto lastFailureTime(OffsetDateTime lastFailureTime) {
        this.lastFailureTime = lastFailureTime;
        return this;
    }

    /**
     * Get lastFailureException
     * @return lastFailureException
     */
    public ExceptionDto getLastFailureException() {
        return lastFailureException;
    }

    public void setLastFailureException(ExceptionDto lastFailureException) {
        this.lastFailureException = lastFailureException;
    }

    public ThreadHealthDetailsDto lastFailureException(ExceptionDto lastFailureException) {
        this.lastFailureException = lastFailureException;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ThreadHealthDetailsDto threadHealthDetails = (ThreadHealthDetailsDto) o;
        return Objects.equals(this.getType(), threadHealthDetails.getType()) &&
                Objects.equals(this.getThreadState(), threadHealthDetails.getThreadState()) &&
                Objects.equals(this.getStackTrace(), threadHealthDetails.getStackTrace()) &&
                Objects.equals(this.getLastAliveTime(), threadHealthDetails.getLastAliveTime()) &&
                Objects.equals(this.getLastSuccessTime(), threadHealthDetails.getLastSuccessTime()) &&
                Objects.equals(this.getLastFailureTime(), threadHealthDetails.getLastFailureTime()) &&
                Objects.equals(this.getLastFailureException(), threadHealthDetails.getLastFailureException());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getType(), getThreadState(), getStackTrace(), getLastAliveTime(), getLastSuccessTime(), getLastFailureTime(), getLastFailureException());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("ThreadHealthDetailsDto {\n");
        sb.append("    type: ").append(toIndentedString(getType())).append("\n");
        sb.append("    threadState: ").append(toIndentedString(getThreadState())).append("\n");
        sb.append("    stackTrace: ").append(toIndentedString(getStackTrace())).append("\n");
        sb.append("    lastAliveTime: ").append(toIndentedString(getLastAliveTime())).append("\n");
        sb.append("    lastSuccessTime: ").append(toIndentedString(getLastSuccessTime())).append("\n");
        sb.append("    lastFailureTime: ").append(toIndentedString(getLastFailureTime())).append("\n");
        sb.append("    lastFailureException: ").append(toIndentedString(getLastFailureException())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

