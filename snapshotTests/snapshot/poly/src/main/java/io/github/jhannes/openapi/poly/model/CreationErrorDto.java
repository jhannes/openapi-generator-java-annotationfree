/*
 * Poly API
 * An example of a polymorphic API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: johannes@brodwall.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.poly.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

public interface CreationErrorDto  {
    String getCode();

    static DuplicateIdentifierErrorDto duplicateIdentifier() {
        DuplicateIdentifierErrorDto result = new DuplicateIdentifierErrorDto();
        result.code("duplicateIdentifier");
        return result;
    }
    static GeneralErrorDto generalError() {
        GeneralErrorDto result = new GeneralErrorDto();
        result.code("generalError");
        return result;
    }
    static IllegalEmailAddressErrorDto illegalAddress() {
        IllegalEmailAddressErrorDto result = new IllegalEmailAddressErrorDto();
        result.code("illegalAddress");
        return result;
    }
    static GeneralErrorDto networkError() {
        GeneralErrorDto result = new GeneralErrorDto();
        result.code("networkError");
        return result;
    }

    static Class<? extends CreationErrorDto> getType(String code) {
        switch (code) {
        case "duplicateIdentifier":
            return DuplicateIdentifierErrorDto.class;
        case "generalError":
            return GeneralErrorDto.class;
        case "illegalAddress":
            return IllegalEmailAddressErrorDto.class;
        case "networkError":
            return GeneralErrorDto.class;
        default:
            throw new IllegalArgumentException("Illegal code " + code);
        }
    }

    void readOnlyFieldsWithValue(List<String> fields);
}

