/*
 * Sample API
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.typeHierarchy.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.jhannes.openapi.typeHierarchy.model.CatDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.jhannes.openapi.typeHierarchy.JSON;

/**
 * CatAllOfDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatAllOfDto {
  public static final String SERIALIZED_NAME_HUNTS = "hunts";
  @SerializedName(SERIALIZED_NAME_HUNTS)
  private Boolean hunts;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public CatAllOfDto() {
    this.petType = this.getClass().getSimpleName();
  }

  
  public CatAllOfDto(
     Integer age
  ) {
    this();
    this.age = age;
  }

  public CatAllOfDto hunts(Boolean hunts) {
    
    this.hunts = hunts;
    return this;
  }

   /**
   * Get hunts
   * @return hunts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHunts() {
    return hunts;
  }


  public void setHunts(Boolean hunts) {
    this.hunts = hunts;
  }


   /**
   * Get age
   * @return age
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAge() {
    return age;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatAllOfDto catAllOf = (CatAllOfDto) o;
    return Objects.equals(this.hunts, catAllOf.hunts) &&
        Objects.equals(this.age, catAllOf.age);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hunts, age);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatAllOfDto {\n");
    sb.append("    hunts: ").append(toIndentedString(hunts)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hunts");
    openapiFields.add("age");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatAllOfDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CatAllOfDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatAllOfDto is not found in the empty JSON string", CatAllOfDto.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("pet_type").getAsString();
      switch (discriminatorValue) {
        case "Cat":
          CatDto.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `pet_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of CatAllOfDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatAllOfDto
  * @throws IOException if the JSON string is invalid with respect to CatAllOfDto
  */
  public static CatAllOfDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatAllOfDto.class);
  }

 /**
  * Convert an instance of CatAllOfDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

