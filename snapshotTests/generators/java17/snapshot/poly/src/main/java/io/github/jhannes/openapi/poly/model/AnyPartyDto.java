/*
 * Poly API
 * An example of a polymorphic API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: johannes@brodwall.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.poly.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

public interface AnyPartyDto  {
    String getType();

    UUID getId();

    String getEmail();

    String getPhone();

    static OrganizationDto organization() {
        OrganizationDto result = new OrganizationDto();
        result.type("organization");
        return result;
    }
    static PersonDto person() {
        PersonDto result = new PersonDto();
        result.type("person");
        return result;
    }

    static Class<? extends AnyPartyDto> getType(String type) {
        switch (type) {
        case "organization":
            return OrganizationDto.class;
        case "person":
            return PersonDto.class;
        default:
            throw new IllegalArgumentException("Illegal type " + type);
        }
    }

    void readOnlyFieldsWithValue(List<String> fields);
}

