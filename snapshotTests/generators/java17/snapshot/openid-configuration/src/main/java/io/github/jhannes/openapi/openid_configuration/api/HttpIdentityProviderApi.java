/*
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.jhannes.openapi.openid_configuration.api;

import io.github.jhannes.openapi.openid_configuration.model.GrantTypeDto;
import io.github.jhannes.openapi.openid_configuration.model.OauthErrorDto;
import io.github.jhannes.openapi.openid_configuration.model.ResponseTypeDto;
import io.github.jhannes.openapi.openid_configuration.model.TokenResponseDto;
import java.net.URI;
import io.github.jhannes.openapi.openid_configuration.model.UserinfoDto;
import jakarta.json.JsonStructure;
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

/* With Java 17 support */
public class HttpIdentityProviderApi implements IdentityProviderApi {

    private final Jsonb jsonb;

    private final URI baseUri;

    public HttpIdentityProviderApi() throws URISyntaxException {
        this(new URI("http://localhost"));
    }

    public HttpIdentityProviderApi(URI baseUri) {
        this(baseUri, JsonbBuilder.create());
    }

    public HttpIdentityProviderApi(URI baseUri, Jsonb jsonb) {
        this.baseUri = baseUri;
        this.jsonb = jsonb;
    }

    @Override
    public TokenResponseDto fetchToken(
            GrantTypeDto grant_type,
            String code,
            String client_id,
            Optional<String> authorization,
            Optional<String> client_secret,
            Optional<URI> redirect_uri,
            Optional<String> subject_token,
            Optional<String> audience
    ) throws IOException, InterruptedException {
        var formParams = new FetchTokenForm()
            .grantType(grant_type)
            .code(code)
            .clientId(client_id)
        ;
        client_secret.ifPresent(formParams::clientSecret);
        redirect_uri.ifPresent(formParams::redirectUri);
        subject_token.ifPresent(formParams::subjectToken);
        audience.ifPresent(formParams::audience);
        var response = fetchTokenResponse(formParams,
            authorization);
        return switch (response) {
            case FetchTokenSuccess success -> success.content();
            case FetchToken400Response response400 ->
                throw new FetchToken400Exception(response400.content());
            case FetchTokenErrorResponse errorResponse ->
                throw new RuntimeException("Error " + errorResponse.statusCode() + ": " + errorResponse.textResponse());
        };
    }

    public FetchTokenResponse fetchTokenResponse(
            FetchTokenForm formParams,
            Optional<String> authorization
    ) throws IOException, InterruptedException {
        var request = HttpRequest.newBuilder(baseUri.resolve("/token"))
            .POST(HttpRequest.BodyPublishers.ofString(formParams.toUrlEncoded()))
            .header("Content-Type", "application/x-www-form-urlencoded");
        authorization.ifPresent(p -> request.header("Authorization", String.valueOf(p)));
        return handleFetchTokenResponse(sendRequest(request.build()));
    }

    protected FetchTokenResponse handleFetchTokenResponse(HttpResponse<String> response) {
        if (response.statusCode() == 200) {
            return new FetchTokenSuccess(jsonb.fromJson(response.body(), TokenResponseDto.class));
        }
        if (response.statusCode() == 400 && isJsonResponse(response)) {
            return new FetchToken400Response(jsonb.fromJson(response.body(), OauthErrorDto.class));
        }
        if (isJsonResponse(response)) {
            return new FetchTokenJsonError(response.statusCode(), jsonb.fromJson(response.body(), JsonStructure.class));
        } else {
            return new FetchTokenUnexpectedError(response.statusCode(), response.body());
        }
    }

    @Override
    public UserinfoDto getUserinfo(
            String authorization
    ) throws IOException, InterruptedException {
        var response = getUserinfoResponse(
            authorization);
        return switch (response) {
            case GetUserinfoSuccess success -> success.content();
            case GetUserinfo401Response response401 ->
                throw new GetUserinfo401Exception();
            case GetUserinfoErrorResponse errorResponse ->
                throw new RuntimeException("Error " + errorResponse.statusCode() + ": " + errorResponse.textResponse());
        };
    }

    public GetUserinfoResponse getUserinfoResponse(
            String authorization
    ) throws IOException, InterruptedException {
        var request = HttpRequest.newBuilder(baseUri.resolve("/userinfo")).GET();
        request.header("Authorization", String.valueOf(authorization));
        return handleGetUserinfoResponse(sendRequest(request.build()));
    }

    protected GetUserinfoResponse handleGetUserinfoResponse(HttpResponse<String> response) {
        if (response.statusCode() == 200) {
            return new GetUserinfoSuccess(jsonb.fromJson(response.body(), UserinfoDto.class));
        }
        if (response.statusCode() == 401) {
            return new GetUserinfo401Response();
        }
        if (isJsonResponse(response)) {
            return new GetUserinfoJsonError(response.statusCode(), jsonb.fromJson(response.body(), JsonStructure.class));
        } else {
            return new GetUserinfoUnexpectedError(response.statusCode(), response.body());
        }
    }

    @Override
    public void startAuthorization(
            String client_id,
            Optional<ResponseTypeDto> response_type,
            Optional<String> state,
            Optional<URI> redirect_uri,
            Optional<String> scope
    ) throws IOException, InterruptedException {
        var query = new StartAuthorizationQuery()
            .clientId(client_id)
        ;
        response_type.ifPresent(query::responseType);
        state.ifPresent(query::state);
        redirect_uri.ifPresent(query::redirectUri);
        scope.ifPresent(query::scope);
        var response = startAuthorizationResponse(query);
        switch (response) {
            case StartAuthorization304Response response304:
                throw new StartAuthorization304Exception();
            case StartAuthorizationErrorResponse errorResponse:
                throw new RuntimeException("Error " + errorResponse.statusCode() + ": " + errorResponse.textResponse());
        };
    }

    public StartAuthorizationResponse startAuthorizationResponse(
            StartAuthorizationQuery query
    ) throws IOException, InterruptedException {
        var request = HttpRequest.newBuilder(baseUri.resolve("/authorize" + "?" + query.toUrlEncoded())).GET();
        return handleStartAuthorizationResponse(sendRequest(request.build()));
    }

    protected StartAuthorizationResponse handleStartAuthorizationResponse(HttpResponse<String> response) {
        if (response.statusCode() == 304) {
            return new StartAuthorization304Response();
        }
        if (isJsonResponse(response)) {
            return new StartAuthorizationJsonError(response.statusCode(), jsonb.fromJson(response.body(), JsonStructure.class));
        } else {
            return new StartAuthorizationUnexpectedError(response.statusCode(), response.body());
        }
    }


    protected HttpResponse<String> sendRequest(HttpRequest request) throws IOException, InterruptedException {
        return HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
    }

    protected boolean isJsonResponse(HttpResponse<String> response) {
        return response.headers().firstValue("content-type").filter(s -> s.startsWith("application/json")).isPresent();
    }
}
