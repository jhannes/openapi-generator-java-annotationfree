/*
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.jhannes.openapi.openid_configuration.api;

import java.net.URI;
import jakarta.json.JsonStructure;
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

/* With Java 17 support */
public class HttpIdentityClientApi implements IdentityClientApi {

    private final Jsonb jsonb;

    private final URI baseUri;

    public HttpIdentityClientApi() throws URISyntaxException {
        this(new URI("http://localhost"));
    }

    public HttpIdentityClientApi(URI baseUri) {
        this(baseUri, JsonbBuilder.create());
    }

    public HttpIdentityClientApi(URI baseUri, Jsonb jsonb) {
        this.baseUri = baseUri;
        this.jsonb = jsonb;
    }

    @Override
    public void handleCallback(
            Optional<String> state,
            Optional<String> code,
            Optional<String> error,
            Optional<String> error_description
    ) throws IOException, InterruptedException {
        var query = new HandleCallbackQuery()
        ;
        state.ifPresent(query::state);
        code.ifPresent(query::code);
        error.ifPresent(query::error);
        error_description.ifPresent(query::errorDescription);
        var response = handleCallbackResponse(query);
        switch (response) {
            case HandleCallbackSuccess success:
                return;
            case HandleCallback304Response response304:
                throw new HandleCallback304Exception();
            case HandleCallbackErrorResponse errorResponse:
                throw new RuntimeException("Error " + errorResponse.statusCode() + ": " + errorResponse.textResponse());
        };
    }

    public HandleCallbackResponse handleCallbackResponse(
            HandleCallbackQuery query
    ) throws IOException, InterruptedException {
        var request = HttpRequest.newBuilder(baseUri.resolve("/callback" + "?" + query.toUrlEncoded())).GET();
        return handleHandleCallbackResponse(sendRequest(request.build()));
    }

    protected HandleCallbackResponse handleHandleCallbackResponse(HttpResponse<String> response) {
        if (response.statusCode() == 200) {
            return new HandleCallbackSuccess();
        }
        if (response.statusCode() == 304) {
            return new HandleCallback304Response(response.headers().firstValue("Set-Cookie"), response.headers().firstValue("Location"));
        }
        if (isJsonResponse(response)) {
            return new HandleCallbackJsonError(response.statusCode(), jsonb.fromJson(response.body(), JsonStructure.class));
        } else {
            return new HandleCallbackUnexpectedError(response.statusCode(), response.body());
        }
    }


    protected HttpResponse<String> sendRequest(HttpRequest request) throws IOException, InterruptedException {
        return HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
    }

    protected boolean isJsonResponse(HttpResponse<String> response) {
        return response.headers().firstValue("content-type").filter(s -> s.startsWith("application/json")).isPresent();
    }
}
