/*
 * Sample API
 * A small example to demonstrate individual problems
 *
 * The version of the OpenAPI document: 0.1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.readOnly.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* PetDto
*/
public class PetDto {

    private UUID id = null;

    /**
     * Gets or Sets petType
     */
    public enum PetTypeEnum {

        CAT("Cat"),
        DOG("Dog");

        private String value;

        PetTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PetTypeEnum fromValue(String text) {
            for (PetTypeEnum b : PetTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private PetTypeEnum pet_type;

    private String name = null;

    private LocalDate birth_date = null;

    private OffsetDateTime created_at = null;

    private List<CommentDto> comments = null;

    /**
     * Gets or Sets status
     */
    public enum StatusEnum {

        PENDING("Pending"),
        AVAILABLE("Available"),
        SOLD("Sold");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }
    }

    private StatusEnum status = null;

    public static String[] readOnlyFields() {
        return new String[] {
                "id",
                "created_at",
                "comments",
                "status",
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "pet_type",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getPetType())) result.add("pet_type");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (!isMissing(getId())) {
            result.add("PetDto.id");
        }
        if (!isMissing(getCreatedAt())) {
            result.add("PetDto.created_at");
        }
        if (!isMissing(getComments()) && !getComments().isEmpty()) {
            result.add("PetDto.comments");
        }
        if (!isMissing(getStatus())) {
            result.add("PetDto.status");
        }
    }

    public <T extends PetDto> T copyTo(T target) {
        if (this.getId() != null) target.setId(this.getId());
        if (this.getPetType() != null) target.setPetType(this.getPetType());
        if (this.getName() != null) target.setName(this.getName());
        if (this.getBirthDate() != null) target.setBirthDate(this.getBirthDate());
        if (this.getCreatedAt() != null) target.setCreatedAt(this.getCreatedAt());
        if (this.getComments() != null) target.setComments(this.getComments());
        if (this.getStatus() != null) target.setStatus(this.getStatus());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get id
     * read only
     * @return id
     */
    public UUID getId() {
        return id;
    }

    /** <strong>read only</strong> */
    public void setId(UUID id) {
        this.id = id;
    }

    public PetDto id(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get pet_type
     * @return pet_type
     */
    public PetTypeEnum getPetType() {
        return pet_type;
    }

    public void setPetType(PetTypeEnum petType) {
        this.pet_type = petType;
    }

    public PetDto petType(PetTypeEnum petType) {
        this.pet_type = petType;
        return this;
    }

    /**
     * Get name
     * @return name
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public PetDto name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get birth_date
     * @return birth_date
     */
    public LocalDate getBirthDate() {
        return birth_date;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birth_date = birthDate;
    }

    public PetDto birthDate(LocalDate birthDate) {
        this.birth_date = birthDate;
        return this;
    }

    /**
     * Get created_at
     * read only
     * @return created_at
     */
    public OffsetDateTime getCreatedAt() {
        return created_at;
    }

    /** <strong>read only</strong> */
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.created_at = createdAt;
    }

    public PetDto createdAt(OffsetDateTime createdAt) {
        this.created_at = createdAt;
        return this;
    }

    public <T> PetDto comments(Collection<T> items, Function<T, CommentDto> mapper) {
        return comments(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> getComments(Function<CommentDto, T> mapper) {
        return getComments().stream().map(mapper).collect(Collectors.toList());
    }

    public PetDto addCommentsItem(CommentDto commentsItem) {
        if (this.comments == null) {
            this.comments = new ArrayList<>();
        }
        this.comments.add(commentsItem);
        return this;
    }

    /**
     * Get comments
     * read only
     * @return comments
     */
    public List<CommentDto> getComments() {
        return comments;
    }

    /** <strong>read only</strong> */
    public void setComments(List<CommentDto> comments) {
        this.comments = comments;
    }

    public PetDto comments(List<CommentDto> comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Get status
     * read only
     * @return status
     */
    public StatusEnum getStatus() {
        return status;
    }

    /** <strong>read only</strong> */
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public PetDto status(StatusEnum status) {
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PetDto pet = (PetDto) o;
        return Objects.equals(this.getId(), pet.getId()) &&
                Objects.equals(this.getPetType(), pet.getPetType()) &&
                Objects.equals(this.getName(), pet.getName()) &&
                Objects.equals(this.getBirthDate(), pet.getBirthDate()) &&
                Objects.equals(this.getCreatedAt(), pet.getCreatedAt()) &&
                Objects.equals(this.getComments(), pet.getComments()) &&
                Objects.equals(this.getStatus(), pet.getStatus());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getPetType(), getName(), getBirthDate(), getCreatedAt(), getComments(), getStatus());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("PetDto {\n");
        sb.append("    id: ").append(toIndentedString(getId())).append("\n");
        sb.append("    pet_type: ").append(toIndentedString(getPetType())).append("\n");
        sb.append("    name: ").append(toIndentedString(getName())).append("\n");
        sb.append("    birth_date: ").append(toIndentedString(getBirthDate())).append("\n");
        sb.append("    created_at: ").append(toIndentedString(getCreatedAt())).append("\n");
        sb.append("    comments: ").append(toIndentedString(getComments())).append("\n");
        sb.append("    status: ").append(toIndentedString(getStatus())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

