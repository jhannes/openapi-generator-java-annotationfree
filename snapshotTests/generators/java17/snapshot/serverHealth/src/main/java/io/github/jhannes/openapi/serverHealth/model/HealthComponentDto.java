/*
 * Health API
 * Returns the status of the service
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.serverHealth.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* HealthComponentDto
*/
public class HealthComponentDto {

    private HealthStatusDto status;

    private HealthDetailsDto details;

    private OffsetDateTime time = null;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "status",
                "details",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getStatus())) result.add("status");
        if (isMissing(getDetails())) result.add("details");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
        if (details != null) {
            details.readOnlyFieldsWithValue(result);
        }
    }

    public <T extends HealthComponentDto> T copyTo(T target) {
        if (this.getStatus() != null) target.setStatus(this.getStatus());
        if (this.getDetails() != null) target.setDetails(this.getDetails());
        if (this.getTime() != null) target.setTime(this.getTime());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get status
     * @return status
     */
    public HealthStatusDto getStatus() {
        return status;
    }

    public void setStatus(HealthStatusDto status) {
        this.status = status;
    }

    public HealthComponentDto status(HealthStatusDto status) {
        this.status = status;
        return this;
    }

    /**
     * Get details
     * @return details
     */
    public HealthDetailsDto getDetails() {
        return details;
    }

    public void setDetails(HealthDetailsDto details) {
        this.details = details;
    }

    public HealthComponentDto details(HealthDetailsDto details) {
        this.details = details;
        return this;
    }

    /**
     * Get time
     * @return time
     */
    public OffsetDateTime getTime() {
        return time;
    }

    public void setTime(OffsetDateTime time) {
        this.time = time;
    }

    public HealthComponentDto time(OffsetDateTime time) {
        this.time = time;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HealthComponentDto healthComponent = (HealthComponentDto) o;
        return Objects.equals(this.getStatus(), healthComponent.getStatus()) &&
                Objects.equals(this.getDetails(), healthComponent.getDetails()) &&
                Objects.equals(this.getTime(), healthComponent.getTime());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStatus(), getDetails(), getTime());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("HealthComponentDto {\n");
        sb.append("    status: ").append(toIndentedString(getStatus())).append("\n");
        sb.append("    details: ").append(toIndentedString(getDetails())).append("\n");
        sb.append("    time: ").append(toIndentedString(getTime())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

