/*
 * Health API
 * Returns the status of the service
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.serverHealth.model;

import java.io.File;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
* StackTraceInnerDto
*/
public class StackTraceInnerDto {

    private String className;

    private String methodName;

    private String fileName;

    private Integer lineNumber;

    public static String[] readOnlyFields() {
        return new String[] {
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        };
    }

    public static String[] requiredFields() {
        return new String[] {
                "className",
                "methodName",
                "fileName",
                "lineNumber",
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = new ArrayList<>();
        if (isMissing(getClassName())) result.add("className");
        if (isMissing(getMethodName())) result.add("methodName");
        if (isMissing(getFileName())) result.add("fileName");
        if (isMissing(getLineNumber())) result.add("lineNumber");
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
    }

    public <T extends StackTraceInnerDto> T copyTo(T target) {
        if (this.getClassName() != null) target.setClassName(this.getClassName());
        if (this.getMethodName() != null) target.setMethodName(this.getMethodName());
        if (this.getFileName() != null) target.setFileName(this.getFileName());
        if (this.getLineNumber() != null) target.setLineNumber(this.getLineNumber());
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }


    /**
     * Get className
     * @return className
     */
    public String getClassName() {
        return className;
    }

    public void setClassName(String className) {
        this.className = className;
    }

    public StackTraceInnerDto className(String className) {
        this.className = className;
        return this;
    }

    /**
     * Get methodName
     * @return methodName
     */
    public String getMethodName() {
        return methodName;
    }

    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    public StackTraceInnerDto methodName(String methodName) {
        this.methodName = methodName;
        return this;
    }

    /**
     * Get fileName
     * @return fileName
     */
    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public StackTraceInnerDto fileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get lineNumber
     * @return lineNumber
     */
    public Integer getLineNumber() {
        return lineNumber;
    }

    public void setLineNumber(Integer lineNumber) {
        this.lineNumber = lineNumber;
    }

    public StackTraceInnerDto lineNumber(Integer lineNumber) {
        this.lineNumber = lineNumber;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StackTraceInnerDto stackTraceInner = (StackTraceInnerDto) o;
        return Objects.equals(this.getClassName(), stackTraceInner.getClassName()) &&
                Objects.equals(this.getMethodName(), stackTraceInner.getMethodName()) &&
                Objects.equals(this.getFileName(), stackTraceInner.getFileName()) &&
                Objects.equals(this.getLineNumber(), stackTraceInner.getLineNumber());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getClassName(), getMethodName(), getFileName(), getLineNumber());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("StackTraceInnerDto {\n");
        sb.append("    className: ").append(toIndentedString(getClassName())).append("\n");
        sb.append("    methodName: ").append(toIndentedString(getMethodName())).append("\n");
        sb.append("    fileName: ").append(toIndentedString(getFileName())).append("\n");
        sb.append("    lineNumber: ").append(toIndentedString(getLineNumber())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

