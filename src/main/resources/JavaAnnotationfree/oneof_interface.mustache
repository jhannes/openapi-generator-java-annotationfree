public interface {{classname}} {{^vendorExtensions.x-implements}}{{#interfaces}}{{#-first}}extends {{/-first}}{{^-first}}, {{/-first}}{{{.}}}{{/interfaces}}{{/vendorExtensions.x-implements}}{{#vendorExtensions.x-implements}}{{#-first}}extends {{{.}}}{{/-first}}{{^-first}}, {{{.}}}{{/-first}}{{/vendorExtensions.x-implements}} {
    {{#vars}}
    {{{datatypeWithEnum}}} {{getter}}();

    {{/vars}}
{{#discriminator}}
    {{#mappedModels}}
    static {{{modelName}}} {{mappingName}}() {
        {{{modelName}}} result = new {{{modelName}}}();
        result.{{discriminator.propertyName}}("{{mappingName}}");
        return result;
    }
    {{/mappedModels}}
{{/discriminator}}

{{#discriminator}}
    static Class<? extends {{{classname}}}> getType(String {{propertyName}}) {
        switch ({{propertyName}}) {
{{#mappedModels}}
        case "{{mappingName}}":
            return {{modelName}}.class;
    {{/mappedModels}}
        default:
            throw new IllegalArgumentException("Illegal {{propertyName}} " + {{propertyName}});
        }
    }
{{/discriminator}}

    void readOnlyFieldsWithValue(List<String> fields);
}
