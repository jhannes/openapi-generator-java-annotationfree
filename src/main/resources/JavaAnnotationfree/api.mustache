{{>licenseInfo}}
package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import jakarta.json.JsonStructure;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

import static java.net.URLEncoder.encode;
import static java.nio.charset.StandardCharsets.UTF_8;

{{#operations}}
public interface {{classname}} {
{{#operation}}
    public sealed interface {{operationIdCamelCase}}Response {
    }
    {{#responses}}

    public record {{operationIdCamelCase}}{{#is2xx}}Success{{/is2xx}}{{^is2xx}}{{code}}Response{{/is2xx}}({{#dataType}}{{{dataType}}} content{{#headers}}{{#first}}, {{/first}}{{/headers}}{{/dataType}}{{#headers}}{{^-first}}, {{/-first}}Optional<String> {{name}}Header{{/headers}}) implements {{operationIdCamelCase}}Response {
    }
    {{^is2xx}}

    public class {{operationIdCamelCase}}{{code}}Exception extends RuntimeException {
    {{#dataType}}
        public final {{{dataType}}} content;
        public {{operationIdCamelCase}}{{code}}Exception({{{dataType}}} content) {
            super(content.toString());
            this.content = content;
        }
    {{/dataType}}
    }
    {{/is2xx}}
    {{/responses}}

    public sealed interface {{operationIdCamelCase}}ErrorResponse extends {{operationIdCamelCase}}Response, ErrorResponse {}

    public record {{operationIdCamelCase}}JsonError(int statusCode, JsonStructure content) implements {{operationIdCamelCase}}ErrorResponse, ErrorJsonResponse {
    }

    public record {{operationIdCamelCase}}UnexpectedError(int statusCode, String content) implements {{operationIdCamelCase}}ErrorResponse, ErrorTextResponse {
    }

    /**
    {{#summary}}
     * {{summary}}
    {{/summary}}
    {{#notes}}
     * {{notes}}
    {{/notes}}
    {{#allParams}}
     * @param {{paramName}} {{description}}{{#isQueryParam}} (query){{/isQueryParam}}{{#isPathParam}} (path){{/isPathParam}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
    {{/allParams}}
    {{#returnType}}
     * @return {{returnType}}
    {{/returnType}}
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
     * {{description}}
     * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    {{#isResponseFile}}byte[] {{/isResponseFile}}{{^isResponseFile}}{{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{/isResponseFile}}{{operationId}}({{#allParams}}{{#isPathParam}}
            {{{dataType}}} {{paramName}}{{/isPathParam}}{{#isQueryParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isQueryParam}}{{#isBodyParam}}
            {{{dataType}}} {{paramName}}{{/isBodyParam}}{{#isFormParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isFormParam}}{{#isHeaderParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{paramName}}{{/isHeaderParam}}{{^-last}},{{/-last}}{{/allParams}}{{#responses}}{{/responses}}
    ) throws IOException, InterruptedException;
    {{#hasHeaderParams}}

    public static class {{operationIdCamelCase}}Headers {
        {{#headerParams}}
        private {{{dataType}}} {{paramName}};

        public {{operationIdCamelCase}}Headers {{paramName}}({{{dataType}}} {{paramName}}) {
            this.{{paramName}} = {{paramName}};
            return this;
        }
        {{/headerParams}}
    }
    {{/hasHeaderParams}}
    {{#hasQueryParams}}

    public static class {{operationIdCamelCase}}Query {
        {{#queryParams}}
        private {{{dataType}}} {{paramName}};

        public {{operationIdCamelCase}}Query {{paramName}}({{{dataType}}} {{paramName}}) {
            this.{{paramName}} = {{paramName}};
            return this;
        }
        {{/queryParams}}

        public String toUrlEncoded() {
            List<String> parameters = new ArrayList<>();
        {{#queryParams}}
            if ({{paramName}} != null) {
                parameters.add("{{baseName}}=" + encode({{paramName}}.toString(), UTF_8));
            }
        {{/queryParams}}
            return String.join("&", parameters);
        }
    }
    {{/hasQueryParams}}
    {{#hasFormParams}}

    public static class {{operationIdCamelCase}}Form {
        {{#formParams}}
        private {{{dataType}}} {{paramName}};

        public {{operationIdCamelCase}}Form {{paramName}}({{{dataType}}} {{paramName}}) {
            this.{{paramName}} = {{paramName}};
            return this;
        }
        {{/formParams}}

        public String toUrlEncoded() {
            List<String> parameters = new ArrayList<>();
        {{#formParams}}
            if ({{paramName}} != null) {
                parameters.add("{{baseName}}=" + encode({{paramName}}.toString(), UTF_8));
            }
        {{/formParams}}
            return String.join("&", parameters);
        }
    }
    {{/hasFormParams}}

{{/operation}}
    interface ErrorResponse {
        int statusCode();
        String textResponse();
    }

    interface ErrorJsonResponse extends ErrorResponse {
        JsonStructure content();
        default String textResponse() {
            return content().toString();
        }
    }

    interface ErrorTextResponse extends ErrorResponse {
        String content();
        default String textResponse() {
            return content();
        }
    }
}
{{/operations}}
