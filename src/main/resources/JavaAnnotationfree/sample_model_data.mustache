{{>licenseInfo}}
package {{modelPackage}};

{{#imports}}import {{import}};
{{/imports}}

import java.net.URI;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;

import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

/**
 * Model tests for {{appName}}
 */
public class SampleModelData {

    public SampleModelData(Random random) {
        this.random = random;
    }

    public SampleModelData(long seed) {
        this(new Random(seed));
    }

{{#models}}
{{#model}}
{{^isMixin}}
    public {{classname}} sample{{classname}}(String propertyName) {
        return sample{{classname}}();
    }

{{#isEnum}}    public {{classname}} sample{{classname}}() {
        return pickOne({{classname}}.values());
    }
{{/isEnum}}{{^isEnum}}{{#oneOf}}{{#-first}}    public {{classname}} sample{{classname}}() {
        List<Supplier<{{classname}}>> factories = List.of({{/-first}}{{#discriminator}}{{#-first}}{{#mappedModels}}
            () -> sample{{modelName}}().{{discriminator.propertyName}}("{{mappingName}}"){{^-last}},{{/-last}}{{/mappedModels}}{{/-first}}{{/discriminator}}{{#-last}}
        );
        return pickOne(factories).get();
    }
{{/-last}}{{/oneOf}}{{/isEnum}}{{^isEnum}}{{^oneOf}}    public {{classname}} sample{{classname}}() {
        return new {{classname}}(){{#allVars}}{{^isArray}}{{^isMap}}{{^isString}}{{^isEnum}}
            .{{name}}(sample{{{datatypeWithEnum}}}("{{name}}")){{/isEnum}}{{/isString}}{{#isEnum}}
            .{{name}}(sample{{classname}}{{datatypeWithEnum}}("{{name}}")){{/isEnum}}{{#isString}}{{^isEnum}}
            .{{name}}({{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}sample{{datatypeWithEnum}}("{{name}}"{{#isPrimitiveType}}{{#dataFormat}}, "{{dataFormat}}"{{/dataFormat}}{{/isPrimitiveType}}){{/defaultValue}}){{/isEnum}}{{/isString}}{{/isMap}}{{/isArray}}{{#isArray}}{{#items.isContainer}}
            .{{name}}({{name}}For{{classname}}()){{/items.isContainer}}{{^items.isContainer}}{{^items.isPrimitiveType}}{{#items.isString}}
            .{{name}}(sampleList(() -> sample{{{items.datatypeWithEnum}}}("{{name}}"), "{{name}}")){{/items.isString}}{{^items.isString}}
            .{{name}}({{#uniqueItems}}sampleSubset({{items.datatypeWithEnum}}.values())){{/uniqueItems}}{{^uniqueItems}}sampleListOf{{{items.datatypeWithEnum}}}("{{name}}")){{/uniqueItems}}{{/items.isString}}{{/items.isPrimitiveType}}{{#items.isPrimitiveType}}
            .{{name}}({{#isEnum}}{{#uniqueItems}}sampleSubset{{/uniqueItems}}{{^uniqueItems}}pickSome{{/uniqueItems}}({{classname}}.{{items.datatypeWithEnum}}.values()){{/isEnum}}{{^isEnum}}{{#uniqueItems}}sampleSet{{/uniqueItems}}{{^uniqueItems}}sampleList{{/uniqueItems}}(() -> sample{{{items.datatypeWithEnum}}}("{{name}}"{{#items.dataFormat}}{{#items.isString}}, "{{items.dataFormat}}"{{/items.isString}}{{/items.dataFormat}}), "{{name}}"){{/isEnum}}){{/items.isPrimitiveType}}{{/items.isContainer}}{{/isArray}}{{#isMap}}{{#items.isContainer}}
            .{{name}}({{name}}For{{classname}}()){{/items.isContainer}}{{^items.isContainer}}
            .{{name}}(sampleMap(() -> {{^items.isPrimitiveType}}{{^items.isString}}sample{{{items.datatypeWithEnum}}}("{{name}}"){{/items.isString}}{{/items.isPrimitiveType}}{{#items.isPrimitiveType}}{{#isEnum}}sample{{classname}}{{{items.datatypeWithEnum}}}("{{name}}"){{/isEnum}}{{^isEnum}}sample{{{items.datatypeWithEnum}}}("{{name}}"{{#items.dataFormat}}{{#items.isString}}, "{{items.dataFormat}}"{{/items.isString}}{{/items.dataFormat}}){{/isEnum}}{{/items.isPrimitiveType}}, "{{name}}")){{/items.isContainer}}{{/isMap}}{{/allVars}};
    }{{#vars}}{{#isContainer}}{{#items.isContainer}}

    public {{{datatypeWithEnum}}} {{name}}For{{classname}}() {
        // Too complex to generate automatically. Subclass and override to customize
        return null;
    }{{/items.isContainer}}{{/isContainer}}{{/vars}}
{{/oneOf}}{{/isEnum}}
    public List<{{classname}}> sampleListOf{{classname}}(String propertyName) {
        return sampleListOf{{classname}}();
    }

    public List<{{classname}}> sampleListOf{{classname}}() {
        {{^isEnum}}
        return sampleList(() -> sample{{classname}}());
        {{/isEnum}}
        {{#isEnum}}
        return pickSome({{classname}}.values());
        {{/isEnum}}
    }
{{#allVars}}{{#isEnum}}{{^oneOf}}
{{#isArray}}
    public {{classname}}.{{items.datatypeWithEnum}} sample{{classname}}{{items.datatypeWithEnum}}(String propertyName) {
        return pickOne({{classname}}.{{items.datatypeWithEnum}}.values());
    }
{{/isArray}}
{{^isArray}}
    public {{classname}}.{{datatypeWithEnum}} sample{{classname}}{{datatypeWithEnum}}(String propertyName) {
        return pickOne({{classname}}.{{datatypeWithEnum}}.values());
    }
{{/isArray}}
{{/oneOf}}{{/isEnum}}{{/allVars}}
{{/isMixin}}
{{#isMixin}}
{{#vars}}
{{#isEnum}}
    public {{classname}}.{{datatypeWithEnum}} sample{{datatypeWithEnum}}(String propertyName) {
        return pickOne({{classname}}.{{datatypeWithEnum}}.values());
    }

{{/isEnum}}
{{/vars}}
{{/isMixin}}
{{/model}}
{{/models}}
{{>sample_random_data}}
}
