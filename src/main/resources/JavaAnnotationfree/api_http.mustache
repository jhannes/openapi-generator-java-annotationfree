{{>licenseInfo}}
package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import jakarta.json.JsonStructure;
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

{{#supportJava17}}
/* With Java 17 support */
{{/supportJava17}}
{{#operations}}
public class Http{{classname}} implements {{classname}} {

    private final Jsonb jsonb;

    private final URI baseUri;
{{#basePath}}

    public Http{{classname}}() throws URISyntaxException {
        this(new URI("{{basePath}}"));
    }
{{/basePath}}

    public Http{{classname}}(URI baseUri) {
        this(baseUri, JsonbBuilder.create());
    }

    public Http{{classname}}(URI baseUri, Jsonb jsonb) {
        this.baseUri = baseUri;
        this.jsonb = jsonb;
    }

{{#operation}}
    {{#isDeprecated}}
    @SuppressWarnings("deprecation")
    {{/isDeprecated}}
    @Override
    public {{#isResponseFile}}byte[] {{/isResponseFile}}{{^isResponseFile}}{{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{/isResponseFile}}{{operationId}}({{#allParams}}{{#isPathParam}}
            {{{dataType}}} {{paramName}}{{/isPathParam}}{{#isQueryParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isQueryParam}}{{#isBodyParam}}
            {{{dataType}}} {{paramName}}{{/isBodyParam}}{{#isFormParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isFormParam}}{{#isHeaderParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{paramName}}{{/isHeaderParam}}{{^-last}},{{/-last}}{{/allParams}}
    ) throws IOException, InterruptedException {
        {{#hasQueryParams}}
        var query = new {{operationIdCamelCase}}Query()
        {{#queryParams}}
        {{#required}}
            .{{paramName}}({{baseName}})
        {{/required}}
        {{/queryParams}}
        ;
        {{#queryParams}}
        {{^required}}
            {{#isContainer}}
        {{baseName}}.ifPresent(list -> list.forEach(p -> queryParameters.add("{{baseName}}=" + encode(String.valueOf(p), UTF_8))));
            {{/isContainer}}
            {{^isContainer}}
        {{baseName}}.ifPresent(query::{{paramName}});
            {{/isContainer}}
        {{/required}}
        {{/queryParams}}
        {{/hasQueryParams}}
        {{#hasFormParams}}
        var formParams = new {{operationIdCamelCase}}Form()
        {{#formParams}}
        {{#required}}
            .{{paramName}}({{baseName}})
        {{/required}}
        {{/formParams}}
        ;
        {{#formParams}}
        {{^required}}
            {{#isContainer}}
        {{baseName}}.ifPresent(list -> list.forEach(p -> queryParameters.add("{{baseName}}=" + encode(String.valueOf(p), UTF_8))));
            {{/isContainer}}
            {{^isContainer}}
        {{baseName}}.ifPresent(formParams::{{paramName}});
            {{/isContainer}}
        {{/required}}
        {{/formParams}}
        {{/hasFormParams}}
        var response = {{operationId}}Response({{#hasQueryParams}}query{{/hasQueryParams}}{{#hasFormParams}}formParams{{/hasFormParams}}{{#allParams}}{{#isPathParam}}{{^-first}},{{/-first}}{{#-first}}{{#hasQueryParams}},{{/hasQueryParams}}{{^hasQueryParams}}{{#hasFormParams}},{{/hasFormParams}}{{/hasQueryParams}}{{/-first}}
            {{paramName}}{{/isPathParam}}{{#isBodyParam}}{{^-first}},{{/-first}}{{#-first}}{{#hasQueryParams}},{{/hasQueryParams}}{{^hasQueryParams}}{{#hasFormParams}},{{/hasFormParams}}{{/hasQueryParams}}{{/-first}}
            {{paramName}}{{/isBodyParam}}{{#isHeaderParam}}{{^-first}},{{/-first}}{{#-first}}{{#hasQueryParams}},{{/hasQueryParams}}{{^hasQueryParams}}{{#hasFormParams}},{{/hasFormParams}}{{/hasQueryParams}}{{/-first}}
            {{paramName}}{{/isHeaderParam}}{{/allParams}});
        {{#returnType}}return {{/returnType}}switch (response) {
{{#responses}}
{{#is2xx}}
            case {{operationIdCamelCase}}Success success{{#returnType}} -> success.content();{{/returnType}}{{^returnType}}:
                return;{{/returnType}}
{{/is2xx}}
{{^is2xx}}
            case {{operationIdCamelCase}}{{code}}Response response{{code}}{{#returnType}} ->{{/returnType}}{{^returnType}}:{{/returnType}}
                throw new {{operationIdCamelCase}}{{code}}Exception({{#dataType}}response{{code}}.content(){{/dataType}});
{{/is2xx}}
{{/responses}}
            case {{operationIdCamelCase}}ErrorResponse errorResponse{{#returnType}} ->{{/returnType}}{{^returnType}}:{{/returnType}}
                throw new RuntimeException("Error " + errorResponse.statusCode() + ": " + errorResponse.textResponse());
        };
    }

    public {{operationIdCamelCase}}Response {{operationId}}Response({{#hasQueryParams}}
            {{operationIdCamelCase}}Query query{{/hasQueryParams}}{{#hasFormParams}}
            {{operationIdCamelCase}}Form formParams{{/hasFormParams}}{{#allParams}}{{#isPathParam}}{{^-first}},{{/-first}}{{#-first}}{{#hasQueryParams}},{{/hasQueryParams}}{{^hasQueryParams}}{{#hasFormParams}},{{/hasFormParams}}{{/hasQueryParams}}{{/-first}}
            {{{dataType}}} {{paramName}}{{/isPathParam}}{{#isBodyParam}}{{^-first}},{{/-first}}{{#-first}}{{#hasQueryParams}},{{/hasQueryParams}}{{^hasQueryParams}}{{#hasFormParams}},{{/hasFormParams}}{{/hasQueryParams}}{{/-first}}
            {{{dataType}}} {{paramName}}{{/isBodyParam}}{{#isHeaderParam}}{{^-first}},{{/-first}}{{#-first}}{{#hasQueryParams}},{{/hasQueryParams}}{{^hasQueryParams}}{{#hasFormParams}},{{/hasFormParams}}{{/hasQueryParams}}{{/-first}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{paramName}}{{/isHeaderParam}}{{/allParams}}
    ) throws IOException, InterruptedException {
        var request = HttpRequest.newBuilder(baseUri.resolve("{{path}}"{{#hasQueryParams}} + "?" + query.toUrlEncoded(){{/hasQueryParams}})){{^hasFormParams}}.{{httpMethod}}();{{/hasFormParams}}
        {{#hasFormParams}}
            .{{httpMethod}}(HttpRequest.BodyPublishers.ofString(formParams.toUrlEncoded()))
            .header("Content-Type", "application/x-www-form-urlencoded");
        {{/hasFormParams}}
        {{#headerParams}}
        {{#required}}
        request.header("{{baseName}}", String.valueOf({{paramName}}));
        {{/required}}
        {{^required}}
        {{paramName}}.ifPresent(p -> request.header("{{baseName}}", String.valueOf(p)));
        {{/required}}
        {{/headerParams}}
        return handle{{operationIdCamelCase}}Response(sendRequest(request.build()));
    }

    protected {{operationIdCamelCase}}Response handle{{operationIdCamelCase}}Response(HttpResponse<String> response) {
{{#responses}}
        if (response.statusCode() == {{code}}{{^is2xx}}{{#dataType}} && isJsonResponse(response){{/dataType}}{{/is2xx}}) {
            return new {{operationIdCamelCase}}{{#is2xx}}Success{{/is2xx}}{{^is2xx}}{{code}}Response{{/is2xx}}({{#dataType}}jsonb.fromJson(response.body(), {{{dataType}}}.class){{#headers}}{{#-first}}, {{/-first}}{{/headers}}{{/dataType}}{{#headers}}{{^-first}}, {{/-first}}response.headers().firstValue("{{baseName}}"){{/headers}});
        }
{{/responses}}
        if (isJsonResponse(response)) {
            return new {{operationIdCamelCase}}JsonError(response.statusCode(), jsonb.fromJson(response.body(), JsonStructure.class));
        } else {
            return new {{operationIdCamelCase}}UnexpectedError(response.statusCode(), response.body());
        }
    }

{{/operation}}

    protected HttpResponse<String> sendRequest(HttpRequest request) throws IOException, InterruptedException {
        return HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
    }

    protected boolean isJsonResponse(HttpResponse<String> response) {
        return response.headers().firstValue("content-type").filter(s -> s.startsWith("application/json")).isPresent();
    }
}
{{/operations}}
