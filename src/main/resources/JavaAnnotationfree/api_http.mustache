{{>licenseInfo}}
package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.Optional;

import static java.net.URLEncoder.encode;
import static java.nio.charset.StandardCharsets.UTF_8;

{{#operations}}
public class Http{{classname}} implements {{classname}} {

{{#operation}}
{{#-first}}
    private final Jsonb jsonb;

    private final URL baseUrl;
{{#basePath}}

    public Http{{classname}}() throws MalformedURLException {
        this(new URL("{{basePath}}"));
    }
{{/basePath}}

    public Http{{classname}}(URL baseUrl) {
        this(baseUrl, JsonbBuilder.create());
    }

    public Http{{classname}}(URL baseUrl, Jsonb jsonb) {
        this.baseUrl = baseUrl;
        this.jsonb = jsonb;
    }

{{/-first}}
    {{#isDeprecated}}
    @SuppressWarnings("deprecation")
    {{/isDeprecated}}
    @Override
    public {{#isResponseFile}}byte[] {{/isResponseFile}}{{^isResponseFile}}{{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{/isResponseFile}}{{operationId}}({{#allParams}}{{#isPathParam}}
            {{{dataType}}} {{paramName}}{{/isPathParam}}{{#isQueryParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isQueryParam}}{{#isBodyParam}}
            {{{dataType}}} {{paramName}}{{/isBodyParam}}{{#isFormParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isFormParam}}{{#isHeaderParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{paramName}}{{/isHeaderParam}}{{^-last}},{{/-last}}{{/allParams}}{{#responses}}{{#headers}},
            Consumer<{{{dataType}}}> set{{nameInCamelCase}}{{/headers}}{{/responses}}
    ) throws IOException {
        {{#hasQueryParams}}
        List<String> queryParameters = new ArrayList<>();
        {{#queryParams}}
        {{#required}}
            {{#isContainer}}
        {{baseName}}.forEach(p -> queryParameters.add("{{baseName}}=" + encode(String.valueOf(p), UTF_8)));
            {{/isContainer}}
            {{^isContainer}}
        queryParameters.add("{{baseName}}=" + encode(String.valueOf({{baseName}}), UTF_8));
          {{/isContainer}}
        {{/required}}
        {{^required}}
            {{#isContainer}}
        {{baseName}}.ifPresent(list -> list.forEach(p -> queryParameters.add("{{baseName}}=" + encode(String.valueOf(p), UTF_8))));
            {{/isContainer}}
            {{^isContainer}}
        {{baseName}}.ifPresent(p -> queryParameters.add("{{baseName}}=" + encode(String.valueOf(p), UTF_8)));
            {{/isContainer}}
        {{/required}}
        {{/queryParams}}
        String query = queryParameters.isEmpty() ? "" : "?" + String.join("&", queryParameters);
        {{/hasQueryParams}}
        HttpURLConnection connection = openConnection("{{path}}"{{#pathParams}}
                .replace("{{curly}}{{paramName}}}", encode(String.valueOf({{paramName}}), UTF_8)){{/pathParams}}{{#hasQueryParams}} + query{{/hasQueryParams}});
        connection.setRequestMethod("{{httpMethod}}");
        {{#headerParams}}
        {{paramName}}.ifPresent(p -> connection.setRequestProperty("{{baseName}}", String.valueOf(p)));
        {{/headerParams}}
        {{#hasFormParams}}
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setDoOutput(true);
        List<String> formParameters = new ArrayList<>();
        {{#formParams}}
        {{#required}}
        formParameters.add("{{baseName}}=" + encode(String.valueOf({{baseName}}), UTF_8));
        {{/required}}
        {{^required}}
        {{baseName}}.ifPresent(p -> formParameters.add("{{baseName}}=" + encode(String.valueOf(p), UTF_8)));
        {{/required}}
        {{/formParams}}
        connection.getOutputStream().write(String.join("&", formParameters).getBytes());
        {{/hasFormParams}}
        {{#bodyParam}}
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);
        jsonb.toJson({{paramName}}, connection.getOutputStream());
        {{/bodyParam}}
        if (connection.getResponseCode() >= 300) {
            throw new IOException("Unsuccessful http request " + connection.getResponseCode() + " " + connection.getResponseMessage());
        }
    {{#returnType}}
    {{#isResponseFile}}
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        connection.getInputStream().transferTo(buffer);
        return buffer.toByteArray();
    {{/isResponseFile}}
    {{^isResponseFile}}
    {{#returnContainer}}
        return jsonb.fromJson(connection.getInputStream(), getParameterizedType(List.class, new Type[]{ {{returnBaseType}}.class }));
    {{/returnContainer}}
    {{^returnContainer}}
        return jsonb.fromJson(connection.getInputStream(), {{returnType}}.class);
    {{/returnContainer}}
    {{/isResponseFile}}
    {{/returnType}}
    }

{{/operation}}
    protected HttpURLConnection openConnection(String relativeUrl) throws IOException {
        return (HttpURLConnection) new URL(baseUrl + relativeUrl).openConnection();
    }

    private static ParameterizedType getParameterizedType(Class<?> rawType, final Type[] typeArguments) {
        return new ParameterizedType() {
            @Override
            public Type[] getActualTypeArguments() {
                return typeArguments;
            }

            @Override
            public Type getRawType() {
                return rawType;
            }

            @Override
            public Type getOwnerType() {
                return null;
            }
        };
    }
}
{{/operations}}
