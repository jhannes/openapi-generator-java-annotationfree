{{>licenseInfo}}
package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;
import java.util.List;
import java.util.Optional;

import static java.net.URLEncoder.encode;
import static java.nio.charset.StandardCharsets.UTF_8;

{{#operations}}
public class Http{{classname}} implements {{classname}} {

{{#operation}}
{{#-first}}
    private final Jsonb jsonb;

    private final URL baseUrl;

    public Http{{classname}}(URL baseUrl) {
        this(baseUrl, JsonbBuilder.create());
    }

    public Http{{classname}}(URL baseUrl, Jsonb jsonb) {
        this.baseUrl = baseUrl;
        this.jsonb = jsonb;
    }

{{/-first}}
    @Override
    public {{#isResponseFile}}byte[] {{/isResponseFile}}{{^isResponseFile}}{{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{/isResponseFile}}{{operationId}}({{#allParams}}{{#isPathParam}}
            {{{dataType}}} {{paramName}}{{/isPathParam}}{{#isQueryParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isQueryParam}}{{#isBodyParam}}
            {{{dataType}}} {{paramName}}{{/isBodyParam}}{{#isFormParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{baseName}}{{/isFormParam}}{{#isHeaderParam}}
            {{^required}}Optional<{{{dataType}}}>{{/required}}{{#required}}{{{dataType}}}{{/required}} {{paramName}}{{/isHeaderParam}}{{^-last}},{{/-last}}{{/allParams}}{{#responses}}{{#headers}},
            Consumer<{{{dataType}}}> set{{nameInCamelCase}}{{/headers}}{{/responses}}
    ) throws IOException {
        URL url = new URL(baseUrl + "{{path}}"{{#pathParams}}
                .replace("{{curly}}{{paramName}}}", encode(String.valueOf({{paramName}}), UTF_8)){{/pathParams}});
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("{{httpMethod}}");
        {{#bodyParam}}
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);
        jsonb.toJson({{paramName}}, connection.getOutputStream());
        {{/bodyParam}}
        if (connection.getResponseCode() >= 300) {
            throw new IOException("Unsuccessful http request " + connection.getResponseCode() + " " + connection.getResponseMessage());
        }
    {{#returnType}}
    {{#returnContainer}}
        return jsonb.fromJson(connection.getInputStream(), getParameterizedType(List.class, new Type[]{ {{returnBaseType}}.class }));
    {{/returnContainer}}
    {{^returnContainer}}
        return jsonb.fromJson(connection.getInputStream(), {{returnType}}.class);
    {{/returnContainer}}
    {{/returnType}}
    }

{{/operation}}
    private static ParameterizedType getParameterizedType(Class<?> rawType, final Type[] typeArguments) {
        return new ParameterizedType() {
            @Override
            public Type[] getActualTypeArguments() {
                return typeArguments;
            }

            @Override
            public Type getRawType() {
                return rawType;
            }

            @Override
            public Type getOwnerType() {
                return null;
            }
        };
    }
}
{{/operations}}
