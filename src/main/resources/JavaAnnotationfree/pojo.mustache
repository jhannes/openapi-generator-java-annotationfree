/**
* {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
*/
public class {{classname}}{{#parent}} extends {{parent}}{{/parent}}{{#interfaces}}{{#-first}} implements {{/-first}}{{^-first}}, {{/-first}}{{{.}}}{{/interfaces}} {
{{#vars}}
    {{^isInherited}}

    {{#isEnum}}
        {{^isContainer}}
{{>modelInnerEnum}}
        {{/isContainer}}
        {{#isContainer}}
            {{#mostInnerItems}}
{{>modelInnerEnum}}
            {{/mostInnerItems}}
        {{/isContainer}}

    {{/isEnum}}
    private {{{datatypeWithEnum}}} {{baseName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}}{{^required}} = null{{/required}};
    {{/isInherited}}
{{/vars}}

    public static String[] readOnlyFields() {
        return new String[] {
        {{#allVars}}
            {{#isReadOnly}}
                "{{baseName}}",
            {{/isReadOnly}}
        {{/allVars}}
        };
    }

    public static String[] writeOnlyFields() {
        return new String[] {
        {{#allVars}}
            {{#isWriteOnly}}
                "{{baseName}}",
            {{/isWriteOnly}}
        {{/allVars}}
        };
    }

    public static String[] requiredFields() {
        return new String[] {
        {{#vars}}
            {{#required}}
                "{{baseName}}",
            {{/required}}
        {{/vars}}
        };
    }

    public List<String> missingRequiredFields() {
        List<String> result = {{#parent}}super.missingRequiredFields(){{/parent}}{{^parent}}new ArrayList<>(){{/parent}};
        {{#vars}}
            {{#required}}
                {{^isInherited}}
        if (isMissing({{getter}}())) result.add("{{baseName}}");
                {{/isInherited}}
            {{/required}}
        {{/vars}}
        return result;
    }

    public void readOnlyFieldsWithValue(List<String> result) {
{{#parent}}
        super.readOnlyFieldsWithValue(result);
{{/parent}}
{{#vars}}
    {{^isInherited}}
    {{#isReadOnly}}
        if (!isMissing({{getter}}()){{#isContainer}} && !{{getter}}().isEmpty(){{/isContainer}}) {
            result.add("{{classname}}.{{baseName}}");
        }
    {{/isReadOnly}}
    {{^isReadOnly}}
        {{^isPrimitiveType}}
            {{^isMap}}
                {{#items}}
                    {{#isModel}}
        if ({{baseName}} != null) {
            {{baseName}}.forEach(o -> o.readOnlyFieldsWithValue(result));
        }
                    {{/isModel}}
                {{/items}}
            {{/isMap}}
            {{#isMap}}
                {{^items.isContainer}}
        if ({{baseName}} != null) {
            {{baseName}}.values().forEach(o -> o.readOnlyFieldsWithValue(result));
        }
                {{/items.isContainer}}
            {{/isMap}}
            {{^isArray}}
                {{#isModel}}
        if ({{baseName}} != null) {
            {{baseName}}.readOnlyFieldsWithValue(result);
        }
                {{/isModel}}
            {{/isArray}}
        {{/isPrimitiveType}}
    {{/isReadOnly}}
    {{/isInherited}}
{{/vars}}
    }

    public <T extends {{classname}}> T copyTo(T target) {
{{#parent}}
        super.copyTo(target);
{{/parent}}
{{#vars}}
    {{^isInherited}}
        if (this.{{getter}}() != null) target.{{setter}}(this.{{getter}}());
    {{/isInherited}}
{{/vars}}
        return target;
    }

    private boolean isMissing(String s) {
        return s == null || s.isEmpty();
    }

    private boolean isMissing(List<?> list) {
        return list == null;
    }

    private boolean isMissing(Object s) {
        return s == null;
    }

{{#vars}}
    {{^isInherited}}
    {{#isArray}}

    public <T> {{classname}} {{name}}(Collection<T> items, Function<T, {{{items.datatypeWithEnum}}}> mapper) {
        return {{name}}(items.stream().map(mapper).collect(Collectors.toList()));
    }

    public <T> List<T> {{getter}}(Function<{{{items.datatypeWithEnum}}}, T> mapper) {
        return {{getter}}().stream().map(mapper).collect(Collectors.toList());
    }

    public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
        {{^required}}
        if (this.{{baseName}} == null) {
            this.{{baseName}} = {{{defaultValue}}};
        }
        {{/required}}
        this.{{baseName}}.add({{name}}Item);
        return this;
    }
    {{/isArray}}
    {{#isMap}}

    public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
         {{^required}}
         if (this.{{baseName}} == null) {
             this.{{baseName}} = {{{defaultValue}}};
         }
         {{/required}}
         this.{{baseName}}.put(key, {{name}}Item);
         return this;
    }
    {{/isMap}}

    /**
    {{#description}}
     * {{description}}
    {{/description}}
    {{^description}}
     * Get {{baseName}}
    {{/description}}
    {{#example}}
     * example: {{example}}
    {{/example}}
    {{#minimum}}
     * minimum: {{minimum}}
    {{/minimum}}
    {{#maximum}}
     * maximum: {{maximum}}
    {{/maximum}}
    {{#isReadOnly}}
     * read only
    {{/isReadOnly}}
     * @return {{baseName}}
     */
    {{#vendorExtensions.extraAnnotation}}
        {{{vendorExtensions.extraAnnotation}}}
    {{/vendorExtensions.extraAnnotation}}
    public {{{datatypeWithEnum}}} {{getter}}() {
        return {{baseName}};
    }

    {{#isReadOnly}}
    /** <strong>read only</strong> */
    {{/isReadOnly}}
    public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{baseName}} = {{name}};
    }

    public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{baseName}} = {{name}};
        return this;
    }
    {{/isInherited}}
    {{#isInherited}}
    {{#isArray}}

    @Override
    public <T> {{classname}} {{name}}(Collection<T> items, Function<T, {{{items.datatypeWithEnum}}}> mapper) {
        super.{{name}}(items, mapper);
        return this;
    }

    @Override
    public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
        super.add{{nameInCamelCase}}Item({{name}}Item);
        return this;
    }
    {{/isArray}}
    {{#isMap}}

    @Override
    public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
        super.put{{nameInCamelCase}}Item(key, {{name}}Item)
        return this;
    }
    {{/isMap}}

    @Override
    public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
        super.{{name}}({{name}});
        return this;
    }
    {{/isInherited}}
{{/vars}}

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }{{#hasVars}}
        {{classname}} {{classVarName}} = ({{classname}}) o;
        return {{#vars}}{{#isByteArray}}Arrays{{/isByteArray}}{{^isByteArray}}Objects{{/isByteArray}}.equals(this.{{getter}}(), {{classVarName}}.{{getter}}()){{^-last}} &&
                {{/-last}}{{/vars}}{{#parent}} &&
            super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
            return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
    }

    @Override
    public int hashCode() {
        return Objects.hash({{#vars}}{{^isByteArray}}{{getter}}(){{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{getter}}()){{/isByteArray}}{{^-last}}, {{/-last}}{{/vars}});
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class {{classname}} {\n");
        {{#parent}}
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        {{/parent}}
        {{#vars}}
        sb.append("    {{baseName}}: ").append(toIndentedString({{getter}}())).append("\n");
        {{/vars}}
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
