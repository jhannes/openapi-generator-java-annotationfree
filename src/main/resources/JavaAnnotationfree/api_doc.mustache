# {{classname}}{{#description}}

{{description}}{{/description}}

All URIs are relative to *{{basePath}}*

Method | HTTP request | Description
------------- | ------------- | -------------
{{#operations}}{{#operation}}[**{{operationId}}**]({{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}

{{#operations}}
{{#operation}}

## {{operationId}}

> {{#returnType}}{{returnType}} {{/returnType}}{{operationId}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}})

{{summary}}{{#notes}}

{{notes}}{{/notes}}

### Example

```java
import {{{invokerPackage}}}.api.*;
import {{{invokerPackage}}}.models.*;

public class Example {
    public static void main(String[] args) {
{{#hasAuthMethods}}
    {{#authMethods}}{{#isBasic}}{{#isBasicBasic}}
        // Configure HTTP basic authorization: {{{name}}}
        {{{classname}}} client = new Http{{{classname}}}() {
            protected HttpURLConnection openConnection(String relativeUrl) throws IOException {
                HttpURLConnection connection = super.openConnection(relativeUrl);
                String authentication = "Basic " + Base64.getEncoder().encode(("USERNAME" + ":" + "PASSWORD").getBytes());
                connection.setRequestParameter("Authorization", authentication);
                return connection;
            }
        };{{/isBasicBasic}}{{#isBasicBearer}}
        // Configure HTTP basic authorization: {{{name}}}
        {{{classname}}} client = new Http{{{classname}}}() {
            protected HttpURLConnection openConnection(String relativeUrl) throws IOException {
                HttpURLConnection connection = super.openConnection(relativeUrl);
                String authentication = "Bearer " + "BEARER TOKEN";
                connection.setRequestParameter("Authorization", authentication);
                return connection;
            }
        };{{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}// Configure HTTP bearer authorization: {{{name}}}
        {{{classname}}} client = new Http{{{classname}}}() {
            protected HttpURLConnection openConnection(String relativeUrl) throws IOException {
                HttpURLConnection connection = super.openConnection(relativeUrl);
                connection.setRequestParameter("{{keyParamName}}", apiKey);
                return connection;
            }
        };{{/isApiKey}}{{#isOAuth}}
        // Configure HTTP basic authorization: {{{name}}}
        HttpURLConnectionApiClient client = new HttpURLConnectionApiClient("{{basePath}}") {
            @Override
            public ClientExchange createExchange() {
                String authentication = "Bearer " + "BEARER TOKEN";
                exchange.setHeader("Authorization", authentication);
                return exchange;
            }
        };{{/isOAuth}}
    {{/authMethods}}
{{/hasAuthMethods}}
{{^hasAuthMethods}}
        {{{classname}}} client = new Http{{{classname}}}();
{{/hasAuthMethods}}

        {{#allParams}}
        {{{dataType}}} {{{paramName}}} = {{{example}}}; // {{{dataType}}} | {{{description}}}
        {{/allParams}}
        try {
            {{#returnType}}{{{returnType}}} result = {{/returnType}}client.{{{operationId}}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});{{#returnType}}
            System.out.println(result);{{/returnType}}
        } catch (IOException e) {
            System.err.println("Exception when calling {{{classname}}}#{{{operationId}}}");
            e.printStackTrace();
        }
    }
}
```

### Parameters

{{^allParams}}This endpoint does not need any parameter.{{/allParams}}{{#allParams}}{{#-last}}
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------{{/-last}}{{/allParams}}
{{#allParams}} **{{paramName}}** | {{#isPrimitiveType}}**{{dataType}}**{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isFile}}**{{dataType}}**{{/isFile}}{{^isFile}}[**{{dataType}}**]({{baseType}}.md){{/isFile}}{{/isPrimitiveType}}| {{description}} |{{^required}} [optional]{{/required}}{{^isContainer}}{{#defaultValue}} [default to {{defaultValue}}]{{/defaultValue}}{{/isContainer}}{{#allowableValues}} [enum: {{#values}}{{{.}}}{{^-last}}, {{/-last}}{{/values}}]{{/allowableValues}}
{{/allParams}}

### Return type

{{#returnType}}{{#returnTypeIsPrimitive}}**{{returnType}}**{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}[**{{returnType}}**]({{returnBaseType}}.md){{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}null (empty response body){{/returnType}}

### Authorization

{{^authMethods}}No authorization required{{/authMethods}}{{#authMethods}}[{{name}}](../README.md#{{name}}){{^-last}}, {{/-last}}{{/authMethods}}

### HTTP request headers

- **Content-Type**: {{#consumes}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/consumes}}{{^consumes}}Not defined{{/consumes}}
- **Accept**: {{#produces}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/produces}}{{^produces}}Not defined{{/produces}}

{{#responses.0}}
### HTTP response details
| Status code | Description | Response headers |
|-------------|-------------|------------------|
{{#responses}}
| **{{code}}** | {{message}} | {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} |
{{/responses}}
{{/responses.0}}

{{/operation}}
{{/operations}}
